//===================================================================
// COPYRIGHT  2022/02/10
//===================================================================
// CMCreateGTOSystemCmd.cpp
// Header definition of class CMCreateGTOSystemCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022/02/10 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMCreateGTOSystemCmd.h"
#include "CATApplicationFrame.h"

#include "CATCreateExternalObject.h"
CATCreateClass( CMCreateGTOSystemCmd);

#include "CUSCAAUtilService.h"
#include "PPRUtity.h"
#include "CAAUtility.h"
#include <regex>

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CMCreateGTOSystemCmd::CMCreateGTOSystemCmd() :
CATStateCommand ("CMCreateGTOSystemCmd", CATDlgEngOneShot, CATCommandModeShared)
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
, _OKAgent(NULL),
_ApplyAgent(NULL),
_CloseAgent(NULL),
_CancleAgent(NULL)
{
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMSystemGTODlg(pWnd, "GTO System");
	_Panel->Build();
	_Panel->SetFather(this);

	pZWFatherRef = NULL;
	pZWFatherOcc = NULL;

}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CMCreateGTOSystemCmd::~CMCreateGTOSystemCmd()
{
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_CancleAgent != NULL)
	{
		_CancleAgent->RequestDelayedDestruction();
		_CancleAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	_RELEASE_PTR_(pZWFatherRef);
	_RELEASE_PTR_(pZWFatherOcc);

}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CMCreateGTOSystemCmd::BuildGraph()
{
// TODO: Define the StateChart
// ---------------------------
		// Define the OK button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

		// Define the Close button agent
	_CancleAgent = new CATDialogAgent("Cancel Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl

	CATAcquisitionFilter* pFilter = Filter((FilterMethod)&CMCreateGTOSystemCmd::SelectionCheck, (void*)NULL);
	_pSelectAgent->SetFilter(pFilter);

	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMCreateGTOSystemCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&CMCreateGTOSystemCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMCreateGTOSystemCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateGTOSystemCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMCreateGTOSystemCmd::ElementSelection, NULL, NULL, (void*)1));

	/*
	ID_WorkLevelCombo,				//Combo1
	ID_SafetyidentifyCombo,			//Combo2
	ID_WorkAreaCombo,				//Combo3
	ID_WorkTypeCombo,				//Combo4

	workLevel.Range = "Key,Important,General";
	Safetyidentify.Range = "N,Y";
	WorkArea.Range = "ZJS,JT,QJS,HJS,PW,CW,JY";
	skill.Range = "AV,ME,AV-ME";
	Model.Range = "W,C,A";
	*/
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_WorkLevelCombo), "CMSystemGTODlg", "workLevel.Range", ",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_SafetyidentifyCombo), "CMSystemGTODlg", "Safetyidentify.Range", ",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_WorkAreaCombo), "CMSystemGTODlg", "WorkArea.Range", ",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_SkillCombo), "CMSystemGTODlg", "skill.Range", ",");
// 	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_ModelCombo), "CMSystemGTODlg", "Model.Range", ",");
// 	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_BUNumberCombo), "CMSystemGTODlg", "BUNumber.Range", ",");



// 	_Panel->SetVisibility(CATDlgShow);

}

HRESULT CMCreateGTOSystemCmd::CreateDELGTOSystem()
{
	if (pZWFatherRef == NULL)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTODlg", (CATString)"msg.nodeFatherNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return S_FALSE;
	}

	PPRUtity spPPRUtity;
	CATIPLMNavInstance * spNewGTOSystemInstance;
	HRESULT rc = spPPRUtity.CreateSubSystemOrOperation("CUS_HeaderOperation_GTO",
		pZWFatherRef, spNewGTOSystemInstance);


	if (spNewGTOSystemInstance == NULL) {
		cout << "Failed to create operation under the system" << endl;
		return S_FALSE;
	}

	CATIPLMNavReference * spNewGTOSystemRef = NULL;
	rc = spNewGTOSystemInstance->GetReferenceInstanceOf(spNewGTOSystemRef);
	if (spNewGTOSystemRef == NULL)
	{
		cout << "Failed to Get new AO system Reference" << endl;
		return S_FALSE;
	}

	/*
	ID_WorkLevelCombo,				//Combo1
	ID_SafetyidentifyCombo,			//Combo2
	ID_WorkAreaCombo,				//Combo3
	ID_WorkTypeCombo,				//Combo4
	ID_CodeEditor,					//Editor1
	ID_NameEditor,					//Editor2
	ID_EffectivityEditor,			//Editor3
	ID_CommentsEditor				//Editor4
	*/
	CATDlgEditor *pCodeEditor = _Panel->GetEditor(ID_CodeEditor);
	CATUnicodeString sInputCode = pCodeEditor->GetText();

	CATDlgEditor *pNameEditor = _Panel->GetEditor(ID_NameEditor);
	CATUnicodeString sInputName = pNameEditor->GetText();

	CATDlgEditor *pEffectivityEditor = _Panel->GetEditor(ID_EffectivityEditor);
	CATUnicodeString sInputEffectivity = pEffectivityEditor->GetText();

	CATDlgEditor *pCommentsEditor = _Panel->GetEditor(ID_CommentsEditor);
	CATUnicodeString sInputComments = pCommentsEditor->GetText();

	// Query GTO type from DB
	CATListOfCATUnicodeString olistExistID;
	rc = CUSCAAUtilService::QueryDBExistID("CUS_HeaderOperation_GTO", sInputCode + "*", olistExistID);
	if (FAILED(rc) && olistExistID.Size() <= 0)
	{
		CATUnicodeString Title = "Info";
		CATUnicodeString msg = "Query GTO sequence number failed!";
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return S_FALSE;
	}

	// need GTO Card = CUS_Code + 000 ~ 999 (SequenceNo)
	// CUS_GTO_Card
	CATUnicodeString sSequenceNo("");
	sSequenceNo.BuildFromNum(olistExistID.Size() + 1, "%03d");

 	CATUnicodeString sGTOCard = sInputCode + sSequenceNo;

	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "PLM_ExternalID", sGTOCard);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "V_Name", sGTOCard);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_Code", sGTOCard);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_GTO_Name", sInputName);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_GTO_Card", sGTOCard);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_GTO_Efff", sInputEffectivity);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "V_description", sInputComments);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_Model", sGTOModel);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_WORKTYPE", sGTOWorktype);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_BUNumber", sGTOBuNumber);

	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_ReleaseStatus", "PendingRelease");		//


	CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_GTO_WORKLevel", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_WorkLevelCombo)));
	CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_GTO_Safetyidentify", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_SafetyidentifyCombo)));
	CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_GTO_WorkArea", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_WorkAreaCombo)));
	CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_GTO_Skill", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_SkillCombo)));
// 	CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_Model", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_ModelCombo)));
// 	CUSCAAUtilService::SetObjectAttrString(spNewGTOSystemRef, "CUS_BUNumber", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_BUNumberCombo)));

	CATUnicodeString strMsg = CAAUtility::PLMSave();

	return rc;
}

CATBoolean CMCreateGTOSystemCmd::SelectionCheck()
{
	CATPathElement *pPath = _pSelectAgent->GetValue();
	CATIPLMNavOccurrence* piOccurrence = (CATIPLMNavOccurrence*)(pPath->FindElement(IID_CATIPLMNavOccurrence));
	if (piOccurrence == NULL)
	{
		return FALSE;
	}
	CATIPLMNavReference *piNavReference = NULL;
	piOccurrence->GetRelatedReference(piNavReference);
	if (piNavReference == NULL)
	{
		return FALSE;
	}

	CATUnicodeString strObjType = CAAUtility::GetObjectTypeName(piNavReference);

	if (strObjType != "CUS_Workplan_FTZW")
	{
		return FALSE;
	}

	return TRUE;
}

CATBoolean CMCreateGTOSystemCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;
	if (_pSelectAgent != NULL)
	{
		returnCode = TRUE;
		CATPathElement * pPathElement = _pSelectAgent->GetValue();

		if (pPathElement != NULL)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence)
			{
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}

		_pSelectAgent->InitializeAcquisition();

		if (_pSelectedElement != NULL)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;

			FilterSelectObject();
		}
		else returnCode = FALSE;
	}
	return returnCode;
}

void CMCreateGTOSystemCmd::FilterSelectObject()
{
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);
	if (sSelectObjectType == "CUS_Workplan_FTZW")
	{
		pZWFatherOcc = _pSelectedOccurrence;
		pZWFatherRef = _pSelectedReference;

		CATDlgEditor *pZWFaEditor = _Panel->GetEditor(ID_CodeEditor);
		CATUnicodeString sName = CUSCAAUtilService::GetObjectAttrValue(pZWFatherRef, "V_Name");
		pZWFaEditor->SetText(sName);

		//CUS_WORKTYPE
		sGTOWorktype = CUSCAAUtilService::GetObjectAttrValue(pZWFatherRef, "CUS_WORKTYPE");
// 		_Panel->GetCombo(ID_WorkTypeCombo)->SetSelect(sGTOWorktype);

		// CUS_BUNumber
		sGTOBuNumber = CUSCAAUtilService::GetObjectAttrValue(pZWFatherRef, "CUS_BUNumber");
// 		_Panel->GetCombo(ID_BUNumberCombo)->SetSelect(sGTOBuNumber);
// 
		// CUS_Model
		sGTOModel = CUSCAAUtilService::GetObjectAttrValue(pZWFatherRef, "CUS_Model");
// 		_Panel->GetCombo(ID_ModelCombo)->SetSelect(sGTOModel);

		_Panel->SetVisibility(CATDlgShow);

	}
}

CATBoolean CMCreateGTOSystemCmd::CheckInputCode()
{
	/*
	ID_WorkLevelCombo,				//Combo1
	ID_SafetyidentifyCombo,			//Combo2
	ID_WorkAreaCombo,				//Combo3
	ID_SkillCombo,					//Combo4
	ID_CodeEditor,					//Editor1
	ID_NameEditor,					//Editor2
	ID_EffectivityEditor,			//Editor3
	ID_CommentsEditor				//Editor4
	*/
	CATDlgEditor *pCodeEditor = _Panel->GetEditor(ID_CodeEditor);
	CATUnicodeString sInputCode = pCodeEditor->GetText();

	CATDlgEditor *pNameEditor = _Panel->GetEditor(ID_NameEditor);
	CATUnicodeString sInputName = pNameEditor->GetText();

	CATDlgEditor *pEffectivityEditor = _Panel->GetEditor(ID_EffectivityEditor);
	CATUnicodeString sInputEffectivity = pEffectivityEditor->GetText();


	if (sInputCode == "" || sInputName == "" || sInputEffectivity == "")
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTODlg", (CATString)"msg.nodeFatherNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return TRUE;
	}

	if (sInputAOExternalID == sInputCode)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTODlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTODlg", (CATString)"msg.nodeFatherNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return TRUE;
	}

	// ^1\\d{4}[-,]1\\d{4}$|^1\\d{4}$					// correct
	// ^1\d{4}-1\d{4}|1\d{4},1\d{4}|^1\d{4}$		// correct

	std::regex reg("^2\\d{4}-2\\d{4}$|2\\d{4},2\\d{4}$|^2\\d{4}$");
	CATBoolean bMatched = std::regex_match(sInputEffectivity.ConvertToChar(), reg);
	if (bMatched == FALSE)
	{
		CUSCAAUtilService::ErrorMessage(CATUnicodeString("Error"), CATUnicodeString("Effectivity code is invalid!"));
		return TRUE;
	}

	sInputAOExternalID = sInputCode;

	return FALSE;
}

//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CMCreateGTOSystemCmd::ActionOne( void *data )
{
// TODO: Define the action associated with the transition
// ------------------------------------------------------

return TRUE;
}

CATBoolean CMCreateGTOSystemCmd::OKAction(void *data)
{
	cout << "ZWConnectCmd::OKAction() - INFO: Entering OKAction()... " << endl;
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	// check input
	if (CheckInputCode())
	{
		return FALSE;
	}

	CreateDELGTOSystem();

	return TRUE;
}

CATBoolean CMCreateGTOSystemCmd::ApplyAction(void *data)
{
	cout << "ZWConnectCmd::ApplyAction() - INFO: Entering ApplyAction()... " << endl;
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	// check input
	if (CheckInputCode())
	{
		return FALSE;
	}

	CreateDELGTOSystem();

	return FALSE;
}

CATBoolean CMCreateGTOSystemCmd::CancelAction(void *data)
{
	cout << "CMConnectCmd::CancelAction() - INFO: Entering CancelAction()... " << endl;

	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}
