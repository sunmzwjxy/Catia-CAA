//===================================================================
// COPYRIGHT  2022/02/12
//===================================================================
// CMCreateGTOBOMSystemCmd.cpp
// Header definition of class CMCreateGTOBOMSystemCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022/02/12 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMCreateGTOBOMSystemCmd.h"

#include "CATCreateExternalObject.h"
CATCreateClass( CMCreateGTOBOMSystemCmd);

#include "CUSCAAUtilService.h"
#include "PPRUtity.h"
#include "CAAUtility.h"
//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CMCreateGTOBOMSystemCmd::CMCreateGTOBOMSystemCmd() :
CATStateCommand ("CMCreateGTOBOMSystemCmd", CATDlgEngOneShot, CATCommandModeShared)
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
, _OKAgent(NULL),
_ApplyAgent(NULL),
_CloseAgent(NULL),
_CancleAgent(NULL)
{
	//TODO: Add the constructor code here
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CMSystemGTOBOMDlg(pWnd, "GTOBOM System");
	_Panel->Build();
	_Panel->SetFather(this);

	pZWFatherRef = nullptr;
	pZWFatherOcc = nullptr;
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CMCreateGTOBOMSystemCmd::~CMCreateGTOBOMSystemCmd()
{
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_ApplyAgent != NULL)
	{
		_ApplyAgent->RequestDelayedDestruction();
		_ApplyAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_CancleAgent != NULL)
	{
		_CancleAgent->RequestDelayedDestruction();
		_CancleAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}

	_RELEASE_PTR_(pZWFatherRef);
	_RELEASE_PTR_(pZWFatherOcc);
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CMCreateGTOBOMSystemCmd::BuildGraph()
{
// TODO: Define the StateChart
// ---------------------------
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Cancel button agent
	_ApplyAgent = new CATDialogAgent("Apply Agent");
	_ApplyAgent->AcceptOnNotify(_Panel, _Panel->GetDiaAPPLYNotification());   //GetDiaAPPLYNotification     //GetDiaCANCELNotification 

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

		// Define the Close button agent
	_CancleAgent = new CATDialogAgent("Cancel Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("SelectionAgent");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl

	CATAcquisitionFilter* pFilter = Filter((FilterMethod)&CMCreateGTOBOMSystemCmd::SelectionCheck, (void*)NULL);
	_pSelectAgent->SetFilter(pFilter);

	AddCSOClient(_pSelectAgent);

	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_ApplyAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMCreateGTOBOMSystemCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Cancel button
	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_ApplyAgent), Action((ActionMethod)&CMCreateGTOBOMSystemCmd::ApplyAction));

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMCreateGTOBOMSystemCmd::CancelAction));

	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateGTOBOMSystemCmd::CancelAction));

	AddTransition(pSelectionState, pSelectionState, IsOutputSetCondition(_pSelectAgent), Action((ActionMethod)&CMCreateGTOBOMSystemCmd::ElementSelection, NULL, NULL, (void*)1));

	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_PartCodeCombo), "CMSystemGTOBOMDlg", "PartCode.Range", ",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_MFGDEPTCombo), "CMSystemGTOBOMDlg", "MFGDEPT.Range", ",");
	CUSCAAUtilService::ShowComboValue(_Panel->GetCombo(ID_APLDEPTCombo), "CMSystemGTOBOMDlg", "APLDEPT.Range", ",");


// 	_Panel->SetVisibility(CATDlgShow);
}

CATBoolean CMCreateGTOBOMSystemCmd::ElementSelection(void * data)
{
	CATBoolean returnCode = FALSE;
	if (_pSelectAgent != NULL)
	{
		returnCode = TRUE;
		CATPathElement * pPathElement = _pSelectAgent->GetValue();

		if (pPathElement != NULL)
		{
			_pSelectedElement = pPathElement->FindElement(IID_CATBaseUnknown);
			_pSelectedOccurrence = (CATIPLMNavOccurrence*)(pPathElement->FindElement(IID_CATIPLMNavOccurrence));
			if (_pSelectedOccurrence)
			{
				_pSelectedOccurrence->GetRelatedReference(_pSelectedReference);
			}
		}

		_pSelectAgent->InitializeAcquisition();

		if (_pSelectedElement != NULL)
		{
			// Highlight the selected Element
			if (FAILED(CUSCAAUtilService::HighlightElement(_pSelectedOccurrence, _pSelectedRepInstance, _pSelectedElement)))
				returnCode = FALSE;

			FilterSelectObject();
		}
		else returnCode = FALSE;
	}
	return returnCode;
}

void CMCreateGTOBOMSystemCmd::FilterSelectObject()
{
	/*
	ID_NumberEditor,			//CUS_GTOPart_PartCode
	ID_PartNameEditor,			//CUS_GTOPart_PartName
	ID_VersionEditor,			//
	ID_DescriptionEditor,		//CUS_GTOPart_Description
	ID_PartCodeCombo,			//CUS_GTOPart_Number
	ID_MFGDEPTCombo,			//CUS_GTOPart_Department
	ID_APLDEPTCombo				//CUS_GTOPart_Application
	*/
	CATUnicodeString sSelectObjectType = CUSCAAUtilService::GetObjectKnowledgeType(_pSelectedReference);
	if (sSelectObjectType == "CreateAssembly")
	{
		pZWFatherOcc = _pSelectedOccurrence;
		pZWFatherRef = _pSelectedReference;

		_Panel->SetVisibility(CATDlgShow);

// 		CATDlgEditor *pZWFaEditor = _Panel->GetEditor(ID_NumberEditor);
// 		pZWFaEditor->SetText(CUSCAAUtilService::GetAliasName(pZWFatherRef));
	}
}

CATBoolean CMCreateGTOBOMSystemCmd::SelectionCheck()
{
	CATPathElement *pPath = _pSelectAgent->GetValue();
	CATIPLMNavOccurrence* piOccurrence = (CATIPLMNavOccurrence*)(pPath->FindElement(IID_CATIPLMNavOccurrence));
	if (piOccurrence == NULL)
	{
		return FALSE;
	}
	CATIPLMNavReference *piNavReference = NULL;
	piOccurrence->GetRelatedReference(piNavReference);
	if (piNavReference == NULL)
	{
		return FALSE;
	}

	CATUnicodeString strObjType = CAAUtility::GetObjectTypeName(piNavReference);

	if (strObjType != "CreateAssembly")
	{
		return FALSE;
	}

	return TRUE;
}


HRESULT CMCreateGTOBOMSystemCmd::CreateDELGTOBOMSystem()
{
	if (pZWFatherRef == NULL)
	{
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTOBOMDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTOBOMDlg", (CATString)"msg.nodeFatherNull");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return S_FALSE;
	}

	PPRUtity spPPRUtity;
	CATIPLMNavOccurrence * spNewGTOBOMSystemOcc = NULL;
	CATIPLMNavOccurrence * pMARootOcc = NULL;
	CATIPLMNavReference *pMARootRef = NULL;
	pMARootOcc = CUSCAAUtilService::GetRootOcc(pZWFatherOcc);
	if (pMARootOcc != NULL)
	{
		pMARootOcc->GetRelatedReference(pMARootRef);
	}

	HRESULT rc = spPPRUtity.CreateSubMAAssembly("CUS_GTOPart", pZWFatherOcc, pMARootRef, spNewGTOBOMSystemOcc);	// Create GTO Part


	if (spNewGTOBOMSystemOcc == NULL) {
		cout << "Failed to create GTO BOM under the Assembly" << endl;
		return S_FALSE;
	}

	CATIPLMNavReference * spNewGTOBOMSystemRef = NULL;
	rc = spNewGTOBOMSystemOcc->GetRelatedReference(spNewGTOBOMSystemRef);
	if (spNewGTOBOMSystemRef == NULL)
	{
		cout << "Failed to Get new GTOBOM system Reference" << endl;
		return S_FALSE;
	}


	//////////////////////////////////////////////////////////////////////////
	/*
	ID_NumberEditor,			//CUS_GTOPart_PartCode
	ID_PartNameEditor,			//CUS_GTOPart_PartName
	ID_VersionEditor,			//
	ID_DescriptionEditor,		//CUS_GTOPart_Description
	ID_PartCodeCombo,			//CUS_GTOPart_Number
	ID_MFGDEPTCombo,			//CUS_GTOPart_Department
	ID_APLDEPTCombo				//CUS_GTOPart_Application
	*/
	//////////////////////////////////////////////////////////////////////////
	CATDlgEditor *pNumberEditor = _Panel->GetEditor(ID_NumberEditor);
	CATUnicodeString sInputNumber = pNumberEditor->GetText();

	CATDlgEditor *pPartNameEditor = _Panel->GetEditor(ID_PartNameEditor);
	CATUnicodeString sInputPartName = pPartNameEditor->GetText();

	CATDlgEditor *pDescriptionEditor = _Panel->GetEditor(ID_DescriptionEditor);
	CATUnicodeString sInputDescription = pDescriptionEditor->GetText();

	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOBOMSystemRef, "V_Name", sInputNumber);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOBOMSystemRef, "PLM_ExternalID", sInputNumber);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOBOMSystemRef, "CUS_GTOPart_PartCode", sInputNumber);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOBOMSystemRef, "CUS_GTOPart_PartName", sInputPartName);
	rc = CUSCAAUtilService::SetObjectAttrString(spNewGTOBOMSystemRef, "CUS_GTOPart_Description", sInputDescription);

	CUSCAAUtilService::SetObjectAttrString(spNewGTOBOMSystemRef, "CUS_GTOPart_Number", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_PartCodeCombo)));
	CUSCAAUtilService::SetObjectAttrString(spNewGTOBOMSystemRef, "CUS_GTOPart_Department", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_MFGDEPTCombo)));
	CUSCAAUtilService::SetObjectAttrString(spNewGTOBOMSystemRef, "CUS_GTOPart_Application", CUSCAAUtilService::GetSelectComboValue(_Panel->GetCombo(ID_APLDEPTCombo)));


	return rc;

}

/************************************************************************/
/* validate and check CUS_GTOPart_PartCode                              */
/*					  ID_PartNameEditor                                 */
/************************************************************************/
CATBoolean CMCreateGTOBOMSystemCmd::CheckInputCode()
{
/*
ID_NumberEditor,			//CUS_GTOPart_PartCode
ID_PartNameEditor,			//CUS_GTOPart_PartName
ID_VersionEditor,			//
ID_DescriptionEditor,		//CUS_GTOPart_Description
ID_PartCodeCombo,			//CUS_GTOPart_Number
ID_MFGDEPTCombo,			//CUS_GTOPart_Department
ID_APLDEPTCombo				//CUS_GTOPart_Application
*/
	CATDlgEditor *pNumberEditor = _Panel->GetEditor(ID_NumberEditor);
	CATUnicodeString sInputNumber = pNumberEditor->GetText();

	CATDlgEditor *pPartNameEditor = _Panel->GetEditor(ID_PartNameEditor);
	CATUnicodeString sInputPartName = pPartNameEditor->GetText();

	CATListPtrCATIPLMNavReference opilistIDComp;
	HRESULT hr = CUSCAAUtilService::GetObjReference(sInputNumber, "", opilistIDComp, "CUS_GTOPart");
	if (opilistIDComp.Size() >= 1)
	{
		cout << "exist more than one GTO Part" << endl;
		CATUnicodeString Title = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTOBOMDlg", (CATString)"msg.Title");
		CATUnicodeString msg = CATMsgCatalog::BuildMessage((CATString)"CMSystemGTOBOMDlg", (CATString)"msg.uniqueIDError");
		CUSCAAUtilService::ErrorMessage(Title, msg);
		return TRUE;
	}

	return FALSE;
}

//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CMCreateGTOBOMSystemCmd::ActionOne( void *data )
{
// TODO: Define the action associated with the transition
// ------------------------------------------------------

return TRUE;
}

CATBoolean CMCreateGTOBOMSystemCmd::OKAction(void *data)
{
	cout << "ZWConnectCmd::OKAction() - INFO: Entering OKAction()... " << endl;
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	//// check select 
	//if (!CheckZWSelect())
	//{
	//	return FALSE;
	//}

	//input code null or code is repeat/ Check input
	if (CheckInputCode())
	{
		return FALSE;
	}

	// Create GTOBOM
	CreateDELGTOBOMSystem();
	CATUnicodeString strMsg = CAAUtility::PLMSave();
	if (strMsg != "Success")
		CUSCAAUtilService::ErrorMessage(CATUnicodeString("Error"), CATUnicodeString("Save GTO BOM failed,Plase check!"));

	return TRUE;
}

CATBoolean CMCreateGTOBOMSystemCmd::ApplyAction(void *data)
{
	cout << "ZWConnectCmd::ApplyAction() - INFO: Entering ApplyAction()... " << endl;
	if (_ApplyAgent)
	{
		_ApplyAgent->InitializeAcquisition();
	}

	//// check select 
	//if (!CheckZWSelect())
	//{
	//	return FALSE;
	//}

	//input code null or code is repeat/ Check input
	if (CheckInputCode())
	{
		return FALSE;
	}

	// Create GTOBOM
	CreateDELGTOBOMSystem();

	return FALSE;
}

CATBoolean CMCreateGTOBOMSystemCmd::CancelAction(void *data)
{
	cout << "CMConnectCmd::CancelAction() - INFO: Entering CancelAction()... " << endl;

	if (_Panel != NULL)  _Panel->SetVisibility(CATDlgHide);

	return TRUE;
}
