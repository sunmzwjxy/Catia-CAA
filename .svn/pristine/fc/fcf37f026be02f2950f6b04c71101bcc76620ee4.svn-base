//===================================================================
// COPYRIGHT  2022/03/02
//===================================================================
// CMCreateWorkingProcedureCmd.cpp
// Header definition of class CMCreateWorkingProcedureCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022/03/02 Creation: Code generated by the 3DS wizard
//===================================================================

#include "CMCreateWorkingProcedureCmd.h"
// 
#include "CATCreateExternalObject.h"
CATCreateClass( CMCreateWorkingProcedureCmd);
// AfrFoundation 
#include "CATApplicationFrame.h"
// CATPLMComponentInterfaces 
#include "CATCkeObjectAttrReadServices.h"
#include "CATPathElement.h"
//DELPPRSystemItf
#include "DELIPPRSystemAuth.h"
#include "DELPPRSystemAuthAccess.h"
#include "DELIPPRSystemReorderInSession.h"
#include "DELIPPRSystemReorderPersistent.h"
//System
#include "CATInstantiateComponent.h"

#include "CATListPtrCATIPLMNavEntity.h"

#include "CUSCAAUtilService.h"
#include "PPRUtity.h"
#include "CAAUtility.h"
#include <iostream>
#include <string>
#include <vector>
using namespace std;

struct OperationStruct
{
	OperationStruct()
	{
		pOperationCom = NULL;
		pOperationRef = NULL;
		nOperationName = 0;
	}
	~OperationStruct() 
	{
// 		_RELEASE_PTR_(pOperationCom);
// 		_RELEASE_PTR_(pOperationRef);
	}
	CATIPLMComponent *			pOperationCom;
	CATIPLMNavReference *		pOperationRef;
	int							nOperationName;
};

//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CMCreateWorkingProcedureCmd::CMCreateWorkingProcedureCmd() :
CATStateCommand ("CMCreateWorkingProcedureCmd", CATDlgEngOneShot, CATCommandModeShared),
_OKAgent(NULL),
_CloseAgent(NULL),
_CancleAgent(NULL)

//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
{
	CATDlgWindow *pWnd = (CATApplicationFrame::GetFrame())->GetMainWindow();
	_Panel = new CreateWorkingProcedureDlg(pWnd, "Opeartion System");
	_Panel->Build();
	_Panel->SetFather(this);
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CMCreateWorkingProcedureCmd::~CMCreateWorkingProcedureCmd()
{
	if (_OKAgent != NULL)
	{
		_OKAgent->RequestDelayedDestruction();
		_OKAgent = NULL;
	}

	if (_CloseAgent != NULL)
	{
		_CloseAgent->RequestDelayedDestruction();
		_CloseAgent = NULL;
	}

	if (_CancleAgent != NULL)
	{
		_CancleAgent->RequestDelayedDestruction();
		_CancleAgent = NULL;
	}

	if (_Panel != NULL)
	{
		_Panel->RequestDelayedDestruction();
		_Panel = NULL;
	}
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CMCreateWorkingProcedureCmd::BuildGraph()
{
// TODO: Define the StateChart
// ---------------------------
	// Define the OK button agent
	_OKAgent = new CATDialogAgent("OK Agent");
	_OKAgent->AcceptOnNotify(_Panel, _Panel->GetDiaOKNotification());

	// Define the Close button agent
	_CloseAgent = new CATDialogAgent("Close Agent");
	_CloseAgent->AcceptOnNotify(_Panel, _Panel->GetWindCloseNotification());    //GetMDICloseNotification    //GetWindCloseNotification

	// Define the Close button agent
	_CancleAgent = new CATDialogAgent("Cancel Agent");
	_CancleAgent->AcceptOnNotify(_Panel, _Panel->GetDiaCANCELNotification());    //GetMDICloseNotification    //GetWindCloseNotification


	// Define the selection agent
	_pSelectAgent = new CATPathElementAgent("CMCreateWorkingProcedureCmd");

	// Define the behaviors
	_pSelectAgent->SetBehavior(CATDlgEngWithCSO | CATDlgEngWithPrevaluation | CATDlgEngNewHSOManager);   //CATDlgEngMultiAcquisitionCtrl

	CATAcquisitionFilter* pFilter = Filter((FilterMethod)&CMCreateWorkingProcedureCmd::SelectionCheck, (void*)NULL);
	_pSelectAgent->SetFilter(pFilter);

	AddCSOClient(_pSelectAgent);


	// Define the states
	CATDialogState * pSelectionState = GetInitialState("ElementSelection");
	pSelectionState->AddDialogAgent(_OKAgent);
	pSelectionState->AddDialogAgent(_CloseAgent);
	pSelectionState->AddDialogAgent(_CancleAgent);
	pSelectionState->AddDialogAgent(_pSelectAgent);

	AddTransition(pSelectionState, pSelectionState,IsOutputSetCondition(_pSelectAgent),Action((ActionMethod)& CMCreateWorkingProcedureCmd::ActionOne));

	// Transition from Input state to NULL, when click on OK button
	AddTransition(pSelectionState, NULL, AndCondition(IsOutputSetCondition(_OKAgent), Condition((ConditionMethod)&CMCreateWorkingProcedureCmd::OKAction)), NULL);

	// Transition from Input state to NULL, when click on Close button
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CloseAgent), Action((ActionMethod)&CMCreateWorkingProcedureCmd::CancelAction));
	AddTransition(pSelectionState, NULL, IsOutputSetCondition(_CancleAgent), Action((ActionMethod)&CMCreateWorkingProcedureCmd::CancelAction));

}

CATBoolean CMCreateWorkingProcedureCmd::SelectionCheck()
{
	CATPathElement *pPath = _pSelectAgent->GetValue();
	CATIPLMNavOccurrence* piOccurrence = (CATIPLMNavOccurrence*)(pPath->FindElement(IID_CATIPLMNavOccurrence));
	if (piOccurrence == NULL)
	{
		return FALSE;
	}
	CATIPLMNavReference *piNavReference = NULL;
	piOccurrence->GetRelatedReference(piNavReference);
	if (piNavReference == NULL)
	{
		return FALSE;
	}

	CATUnicodeString strObjType = CAAUtility::GetObjectTypeName(piNavReference);

	if (strObjType != "CUS_HeaderOperation_GTO" && strObjType != "CUS_HeaderOperation_JGD")
	{
		return FALSE;
	}

	return TRUE;
}

//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean CMCreateWorkingProcedureCmd::ActionOne( void *data )
{
// TODO: Define the action associated with the transition
// ------------------------------------------------------
	CATPathElement *pPath = _pSelectAgent->GetValue();
	CATIPLMNavOccurrence* piOccurrence = NULL;
	piOccurrence = (CATIPLMNavOccurrence*)(pPath->FindElement(IID_CATIPLMNavOccurrence));
	if (piOccurrence == NULL)
		return TRUE;
	CATIPLMNavReference *piNavReference = NULL;
	piOccurrence->GetRelatedReference(piNavReference);
	if (piNavReference == NULL)
		return TRUE;

	pZWFatherRef = piNavReference;
	pZWFatherOcc = piOccurrence;

	CATUnicodeString Title = "";
	CATCkeObjectAttrReadServices::GetValueAsString(piNavReference, "V_Name", Title);

	_Panel->SetAOTitle(Title);
	_Panel->SetVisibility(CATDlgShow);

	_pSelectAgent->InitializeAcquisition();
	return TRUE;
}

CATBoolean CMCreateWorkingProcedureCmd::CheckInput()
{
	CATUnicodeString sOperationName = _Panel->GetGXTtitle();
	std::regex reg("^\\d{1,3}$");
	CATBoolean bIsOK = std::regex_match(sOperationName.ConvertToChar(), reg);
	if (bIsOK == FALSE)
		CUSCAAUtilService::ErrorMessage(CATUnicodeString("Error"), CATUnicodeString("Operation Number is invalid! Please type number of length 1 - 3."));
	return bIsOK;
}

HRESULT CMCreateWorkingProcedureCmd::CreateWorkingProcedure()
{
	if (pZWFatherRef == NULL)
	{
		CUSCAAUtilService::ErrorMessage(CATUnicodeString("Error"), CATUnicodeString("Please select GTO or JGD!"));
		return S_FALSE;
	}
	HRESULT rc = S_OK;

	PPRUtity spPPRUtity;
	CATUnicodeString sOperationName = _Panel->GetGXTtitle();
	CATUnicodeString sOperationType = _Panel->GetGXTypeName();

	CATIPLMNavInstance * pNavOperationIns = NULL;
	rc = spPPRUtity.CreateSubSystemOrOperation(sOperationType, pZWFatherRef, pNavOperationIns);		// Create new Operation
	if (FAILED(rc) || pNavOperationIns == NULL)
	{
		CUSCAAUtilService::ErrorMessage(CATUnicodeString("Error"), CATUnicodeString("Create New Operation failed!"));
		return rc;
	}

	CATIPLMNavReference* pNavOperationRef = NULL;
	rc = pNavOperationIns->GetReferenceInstanceOf(pNavOperationRef);

	CATUnicodeString sFatherName = CUSCAAUtilService::GetObjectAttrValue(pZWFatherRef, "V_Name");
	rc = CUSCAAUtilService::SetObjectAttrString(pNavOperationRef, "PLM_ExternalID", sFatherName + "-" + sOperationName);
	rc = CUSCAAUtilService::SetObjectAttrString(pNavOperationRef, "V_Name", sOperationName);		//title

	//Extension By EKL
	CATIPLMNavReference_var pNavOperationRef_var = pNavOperationRef;
	CUSCAAUtilService::AddExtensionByEKL(pNavOperationRef_var, "CUS_GT_OP_Ext");
	CUSCAAUtilService::AddExtensionByEKL(pNavOperationRef_var, "CUS_OpearationCommomExt");


	CATIPLMNavOccurrence * pNavRootOcc = NULL;
	pNavRootOcc = CUSCAAUtilService::GetRootOcc(pZWFatherOcc);

	CATIPLMNavOccurrence_var pNavNewOperationOcc = NULL_var;
	rc = CAAUtility::GetOccurrenceFromSystemInstance(pNavOperationIns, pZWFatherOcc, pNavRootOcc, pNavNewOperationOcc);
	if (FAILED(rc) || pNavNewOperationOcc == NULL)
	{
		CUSCAAUtilService::ErrorMessage(CATUnicodeString("Error"), CATUnicodeString("Get Occ object from system instance failed!"));
		return rc;
	}

	// NewWorkInstruction
	DELIWKIInstructionAuthoring* pWKIFactory = NULL;
	::CATInstantiateComponent("DELWKIInstructionAuthoring", IID_DELIWKIInstructionAuthoring, (void**)&pWKIFactory);
	CATIPLMNavOccurrence_var ohWKINavOcc = NULL_var;
	CATITypeDictionary_var hTypeDic = CATGlobalFunctions::GetTypeDictionary();
	CATIType_var spWIInstructionType;
	hTypeDic->FindTypeInPackage("WkiInstructionReference", "WorkInstructionTypePackage", spWIInstructionType);
	pWKIFactory->CreateNewWorkInstruction(pNavNewOperationOcc, spWIInstructionType, ohWKINavOcc);		// Create new instruction under Operation

	return rc;
}

HRESULT CMCreateWorkingProcedureCmd::ReorderOperations()
{
	HRESULT rc = S_OK;

	DELIPPRSystemReorderInSession* piSystemOccOrder = NULL;
	rc = pZWFatherOcc->QueryInterface(IID_DELIPPRSystemReorderInSession, (void**)&piSystemOccOrder);

	DELIPPRSystemReorderPersistent* piSystemRefOrder = NULL;
	rc = pZWFatherRef->QueryInterface(IID_DELIPPRSystemReorderPersistent, (void**)&piSystemRefOrder);

	CATListPtrCATIPLMComponent oldListOrderedChildren;
	rc = piSystemRefOrder->GetChildrenInPersistedOrder(DELIPPRSystemReorderPersistent::PPRSystemPRTInstance, oldListOrderedChildren);

	std::vector<OperationStruct> vecOperations;
	for (int i = 1; i <= oldListOrderedChildren.Size(); i ++)
	{
		OperationStruct itemOperation;

		CATIPLMComponent* pOperationCom = oldListOrderedChildren[i];	// ??????
		CATIPLMNavEntity* pOpeartionEnt = NULL;
		rc = pOperationCom->QueryInterface(IID_CATIPLMNavEntity, (void**)&pOpeartionEnt);
		assert(rc == S_OK);
		CATIPLMNavInstance* piNavInst = NULL;
		rc = pOpeartionEnt->QueryInterface(IID_CATIPLMNavInstance, (void **)&piNavInst);
		assert(rc == S_OK);
		CATIPLMNavReference* pOperationNavRef = NULL;
		rc = piNavInst->GetReferenceInstanceOf(pOperationNavRef);
		assert(rc == S_OK);
		CATUnicodeString sOperationName = CUSCAAUtilService::GetObjectAttrValue(pOperationNavRef, "V_Name");
		if (SUCCEEDED(rc))
		{
			itemOperation.pOperationCom = pOperationCom;
			itemOperation.pOperationRef = pOperationNavRef;
			sOperationName.ConvertToNum(&itemOperation.nOperationName);

			// save original Operation
			vecOperations.push_back(itemOperation);
		}

	}

	// sort by Operation name
	std::sort(vecOperations.begin(), vecOperations.end(), [](OperationStruct T1, OperationStruct T2) {
		return T1.nOperationName < T2.nOperationName;
	});


	CATListPtrCATIPLMComponent newListOrderedChildren;
	CATListOfInt listIndex;
	int nIndex = 1;
	std::for_each(vecOperations.begin(), vecOperations.end(), [this,oldListOrderedChildren,&newListOrderedChildren,&listIndex, &nIndex](OperationStruct &T) {
		// Update Operation Name
		CATUnicodeString sNewName("");
		sNewName.BuildFromNum(10 * nIndex ++, "%03d");
		CUSCAAUtilService::SetObjectAttrString(T.pOperationRef, "V_Name", sNewName);		//title

		CATUnicodeString sFatherName = CUSCAAUtilService::GetObjectAttrValue(this->pZWFatherRef, "V_Name");
		CUSCAAUtilService::SetObjectAttrString(T.pOperationRef, "PLM_ExternalID", sFatherName + "-" + sNewName);


		// get ordered list
		newListOrderedChildren.Append(T.pOperationCom);
		// get ordered index
		listIndex.Append(oldListOrderedChildren.Locate(T.pOperationCom));
	});

	rc = piSystemRefOrder->PersistChildrenOrder(newListOrderedChildren, oldListOrderedChildren);
	rc = piSystemOccOrder->ReorderChildrenInSession(DELIPPRSystemReorderInSession::PPRSystemRTInstance, listIndex);

	return rc;
}

CATBoolean CMCreateWorkingProcedureCmd::OKAction(void *data)
{
	cout << "Operation ConnectCmd::OKAction() - INFO: Entering OKAction()... " << endl;
	if (_OKAgent)
	{
		_OKAgent->InitializeAcquisition();
	}

	if (CheckInput() == FALSE)
	{
		return FALSE;
	}
	HRESULT rc = CreateWorkingProcedure();
	assert(rc == S_OK);
	if (_Panel->IsReorder()) ReorderOperations();
	CATUnicodeString strMsg = CAAUtility::PLMSave();
	if (strMsg != "Success")
		CUSCAAUtilService::ErrorMessage(CATUnicodeString("Error"), CATUnicodeString("Save JGD failed,Plase check!"));

	RequestDelayedDestruction();
	return TRUE;
}

CATBoolean CMCreateWorkingProcedureCmd::CancelAction(void *data)
{
	cout << "CMConnectCmd::CancelAction() - INFO: Entering CancelAction()... " << endl;

	RequestDelayedDestruction();
	return TRUE;
}
