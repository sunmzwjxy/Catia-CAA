//===================================================================
// COPYRIGHT DS 2022/01/26
//===================================================================
// OperationCloneServer.cpp
// Header definition of class OperationCloneServer
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2022/01/26 Creation: Code generated by the 3DS wizard
//===================================================================

#include "OperationCloneServer.h"
//DELPPRSystemItf 
#include "DELIPPRSystemNav.h"
#include "DELPPRSystemNavAccess.h"
#include "DELIPPRSystemAuth.h"
#include "DELPPRSystemAuthAccess.h"
#include "DELIPPRSystemOccAuth.h"
//CATPLMComponentInterfaces
#include "CATListPtrCATIPLMNavInstance.h"
#include "CATIPLMNavInstance.h"
#include "CATListPtrCATIPLMNavEntity.h"
#include "CATIPLMNavEntity.h"
//KnowledgeInterfaces 
#include "CATCkeObjectAttrReadServices.h"
#include "CATICkeObject.h"
#include "CATListValCATICkeParm.h"
#include "CATICkeParm.h"
#include "CATIValue.h"
#include "CATCkeObjectAttrWriteServices.h"
#include "CATITypeDictionary.h"
#include "CATGlobalFunctions.h"
//DELWkiExposeUseItf 
#include "DELIWKIInstructionAuthoring.h"
#include "DELIWKIAttributeMgt.h"
//System
#include "CATInstantiateComponent.h"
//ObjectModelerBase 
#include "CATOmbLifeCycleRootsBag.h"
//CATPLMIntegrationUse 
#include "CATAdpOpener.h"
#include "CATAdpComponentData.h"
#include "CATAdpOpenParameters.h"
//DELPPRResourceItf 
#include "DELIPPRResourceNav.h"
#include "DELPPRResourceNavAccess.h"
#include "DELIPPRResourceAuth.h"
#include "DELPPRResourceAuthAccess.h"

#include "CUSCAAUtilService.h"
#include "CAAUtility.h"
//-----------------------------------------------------------------------------
// OperationCloneServer : constructor
//-----------------------------------------------------------------------------
OperationCloneServer::OperationCloneServer()
{
}

//-----------------------------------------------------------------------------
// OperationCloneServer : destructor
//-----------------------------------------------------------------------------

OperationCloneServer::~OperationCloneServer()
{
}

int OperationCloneServer::CloneOperation(CATIPLMNavOccurrence_var ispFatherOcc,
										CATIPLMNavReference* ipSourceOperationRef,
										CATIPLMNavOccurrence_var& ospInstantialOpOcc)
{
	DELIPPRSystemNav_var hPPRSystemNav;
	GetPPRSystemNav(hPPRSystemNav);

	DELIPPRSystemAuth_var hPPRSystemAuth;
	GetPPRSystemAuth(hPPRSystemAuth);
	if (hPPRSystemAuth == NULL_var)
	{
		return 1;
	}

	DELIPPRSystemOccAuth* hPPRSystemOccAuth;
	hPPRSystemOccAuth = getDELIPPRSystemOccAuth();

	CATIPLMNavReference *piFatherNavRef = NULL;
	ispFatherOcc->GetRelatedReference(piFatherNavRef);

	CATUnicodeString sourceType = CAAUtility::GetObjectTypeName(ipSourceOperationRef);

	CATIType_var hType = NULL_var;
	CAAUtility::RetrievePLMType(sourceType, hType);
	CATIPLMNavInstance* piNewOperationInst = NULL;

	hPPRSystemAuth->CreateSubSystemOrOperation(piFatherNavRef, hType, (void**)&piNewOperationInst);
	if (piNewOperationInst == NULL)
	{
		return 2;
	}

	CATListPtrCATIPLMNavInstance PathOfInstances;
	hPPRSystemOccAuth->FromOccurrenceToPathOfInstances(ispFatherOcc, PathOfInstances);
	PathOfInstances.Append(piNewOperationInst);
	CATIPLMNavReference *piRootSystemRef = NULL;
	PathOfInstances[1]->GetFather(piRootSystemRef);
	if (piRootSystemRef == NULL)
	{
		return 3;
	}

	CATIPLMNavOccurrence* piRootSystemOcc = NULL;
	hPPRSystemOccAuth->GetOrCreateRootOccurrence(piRootSystemRef, piRootSystemOcc);
	if (piRootSystemOcc == NULL)
	{
		return 4;
	}

	CATIPLMNavOccurrence* piNewOperationOcc = NULL;
	hPPRSystemOccAuth->GetOccurrence(piRootSystemOcc, PathOfInstances, piNewOperationOcc);
	if (piNewOperationOcc == NULL)
	{
		return 5;
	}

	ospInstantialOpOcc = piNewOperationOcc;

	CATIPLMNavReference* piNewOperationRef = NULL;
	piNewOperationInst->GetReferenceInstanceOf(piNewOperationRef);
	if (piNewOperationRef == NULL)
	{
		return 6;
	}

	//Extension By EKL
	CATIPLMNavReference_var spNewOperationRef = piNewOperationRef;
	CUSCAAUtilService::AddExtensionByEKL(spNewOperationRef, "CUS_GT_OP_Ext");
	CUSCAAUtilService::AddExtensionByEKL(spNewOperationRef, "CUS_OpearationCommomExt");


	CopyObjectAttributes(ipSourceOperationRef, spNewOperationRef);

	CopyWIForOperation(ipSourceOperationRef, ospInstantialOpOcc);

	return 0;
}

void OperationCloneServer::CopyObjectAttributes(CATIPLMNavReference* ipSourceOperationRef, CATIPLMNavReference_var& ispNewOperationRef)
{
	if (ipSourceOperationRef == NULL || ispNewOperationRef == NULL_var)
	{
		return;
	}
	CATICkeObject_var spSourceCkeObject = ipSourceOperationRef;
	CATICkeObject_var spNewCkeObject = ispNewOperationRef;

	CATListOfCATUnicodeString ioAttributeNameList;
	CATListOfCATUnicodeString ioAttributeValueAsStringList;
	CATLISTV(CATICkeParm_var) ioAttributeValueList;
	CATCkeObjectAttrReadServices::GetListOfAttributes(spSourceCkeObject, ioAttributeNameList, ioAttributeValueAsStringList, ioAttributeValueList);
	CATUnicodeString sourceID = "";
	CATUnicodeString sourceRevision = "";
	for (int i = 1; i <= ioAttributeNameList.Size(); ++i)
	{
		CATUnicodeString strAttributeName = ioAttributeNameList[i];
		if (strAttributeName == "PLM_ExternalID")
		{
			CATCkeObjectAttrReadServices::GetValueAsString(ipSourceOperationRef, strAttributeName, sourceID);
			continue;
		}
		else if (strAttributeName == "revision")
		{
			CATCkeObjectAttrReadServices::GetValueAsString(ipSourceOperationRef, strAttributeName, sourceRevision);
			continue;
		}
		else if (strAttributeName == "V_Name" || strAttributeName == "V_UseGanttTimeSolver" || strAttributeName == "V_CustoDiscipline" 
				|| strAttributeName == "V_fromExternalID" || strAttributeName == "V_versionComment" || strAttributeName == "KeyPosion" 
				|| strAttributeName == "V_description" || strAttributeName == "V_MeasuredTime" || strAttributeName == "V_EstimatedTime_AddedValueRatio"
				|| strAttributeName == "V_EstimatedTime" || strAttributeName == "V_MaterialScrap" || strAttributeName == "V_TimeMode" 
				|| strAttributeName == "V_sec_level")//需要复制的属性列在这里
		{
			CATIValue_var spValue = NULL_var;
			CATCkeObjectAttrReadServices::GetValue(spSourceCkeObject, strAttributeName, spValue);
			CATCkeObjectAttrWriteServices::SetValue(spNewCkeObject, strAttributeName, spValue);
		}
		else if (strAttributeName.SearchSubString("CUS_") == 0)
		{
			CATIValue_var spValue = NULL_var;
			CATCkeObjectAttrReadServices::GetValue(spSourceCkeObject, strAttributeName, spValue);
			CATCkeObjectAttrWriteServices::SetValue(spNewCkeObject, strAttributeName, spValue);
		}
	}
	CATCkeObjectAttrWriteServices::SetValueWithString(spNewCkeObject, "V_fromExternalID", sourceID + " " + sourceRevision);
}

HRESULT OperationCloneServer::CopyWIForOperation(CATIPLMNavReference* ipSourceOperationRef,
												CATIPLMNavOccurrence_var& ispNewOperationOcc)
{
	HRESULT hr = E_INVALIDARG;
	CATListPtrCATIPLMNavEntity ioChildrenList;
	CATPLMCoreType CoreType = PLMCoreInstance;
	ipSourceOperationRef->ListChildren(ioChildrenList, 1, &CoreType);
	if (ioChildrenList.Size() == 0)
	{
		return S_OK;
	}

	DELIWKIInstructionAuthoring* pWkiAuth = NULL;
	::CATInstantiateComponent("DELWKIInstructionAuthoring", IID_DELIWKIInstructionAuthoring, (void**)&pWkiAuth);

	CATITypeDictionary_var hTypeDic = CATGlobalFunctions::GetTypeDictionary();
	CATIType_var spWIInstructionType;
	hTypeDic->FindTypeInPackage("WkiInstructionReference", "WorkInstructionTypePackage", spWIInstructionType);
	CATIType_var spWIIAlertType;
	hTypeDic->FindTypeInPackage("WkiAlertReference", "WorkInstructionTypePackage", spWIIAlertType);
	
	for (int i = 1; i <= ioChildrenList.Size(); ++i)
	{
		CATIPLMNavEntity_var spNavEntity = ioChildrenList[i];
		CATIPLMNavInstance* piNavInstance = NULL;
		spNavEntity->QueryInterface(IID_CATIPLMNavInstance, (void**)&piNavInstance);
		CATIPLMNavReference* piNavReference = NULL;
		piNavInstance->GetReferenceInstanceOf(piNavReference);

		CATUnicodeString strSourceType = CAAUtility::GetObjectTypeName(piNavReference);

		CATIPLMNavReference* pTargetNavRef = NULL;
		CATIPLMNavOccurrence_var spTargetNavOcc = NULL_var;

		if (strSourceType == "DELWkiInstructionReference")
		{
			pWkiAuth->CreateNewWorkInstruction(ispNewOperationOcc, spWIInstructionType, spTargetNavOcc);
			if (spTargetNavOcc != NULL_var)
			{
				spTargetNavOcc->GetRelatedReference(pTargetNavRef);
				CATIPLMNavReference_var spTargetNavRef = pTargetNavRef;
// 				CUSCAAUtilService::AddExtensionByEKL(spTargetNavRef, "CUS_WkiInstructionExt");
			}
			else
			{
				continue;
			}
		}
		else if (strSourceType == "DELWkiAlertReference")
		{
			pWkiAuth->CreateNewWorkInstruction(ispNewOperationOcc, spWIIAlertType, spTargetNavOcc);
			if (spTargetNavOcc != NULL_var)
			{
				spTargetNavOcc->GetRelatedReference(pTargetNavRef);
			}
			else
			{
				continue;
			}
		}
		else
		{
			continue;
		}
		
		CopyWIAttributes(piNavReference, pTargetNavRef);
	}

	return S_OK;
}

void OperationCloneServer::CopyWIAttributes(CATIPLMNavReference* ipSourceOperationRef, CATIPLMNavReference*& ipNewOperationRef)
{
	if (ipSourceOperationRef == NULL || ipNewOperationRef == NULL)
	{
		return;
	}
	CATUnicodeString strSourceType = CAAUtility::GetObjectTypeName(ipSourceOperationRef);
	CATUnicodeString TextAttriName = "";
	if (strSourceType == "DELWkiInstructionReference")
	{
		TextAttriName = "V_WIInstruction_Text";
	}
	else if (strSourceType == "DELWkiAlertReference")
	{
		TextAttriName = "V_WIAlert_Message";
	}
	DELIWKIAttributeMgt_var spSourceWKIAttrMgt = ipSourceOperationRef;
	DELIWKIAttributeMgt_var spTargetWKIAttrMgt = ipNewOperationRef;
	if (spSourceWKIAttrMgt != NULL_var && spTargetWKIAttrMgt != NULL_var)
	{
		CATIValue_var spValue = NULL_var;
		spSourceWKIAttrMgt->GetValue(TextAttriName, spValue);
		spTargetWKIAttrMgt->SetValue(spValue);
	}

	CATListOfCATUnicodeString ioAttributeNameList;
	CATListOfCATUnicodeString ioAttributeValueAsStringList;
	CATLISTV(CATICkeParm_var) ioAttributeValueList;
	CATCkeObjectAttrReadServices::GetListOfAttributes(ipSourceOperationRef, ioAttributeNameList, ioAttributeValueAsStringList, ioAttributeValueList);
	for (int i = 1; i <= ioAttributeNameList.Size(); ++i)
	{
		CATUnicodeString strAttributeName = ioAttributeNameList[i];
		if (strAttributeName == "V_Name" || strAttributeName == "V_description")//需要复制的属性列在这里
		{
			CATIValue_var spValue = NULL_var;
			CATCkeObjectAttrReadServices::GetValue(ipSourceOperationRef, strAttributeName, spValue);
			CATCkeObjectAttrWriteServices::SetValue(ipNewOperationRef, strAttributeName, spValue);
		}
		else if (strAttributeName.SearchSubString("CUS_") == 0)
		{
			CATIValue_var spValue = NULL_var;
			CATCkeObjectAttrReadServices::GetValue(ipSourceOperationRef, strAttributeName, spValue);
			CATCkeObjectAttrWriteServices::SetValue(ipNewOperationRef, strAttributeName, spValue);
		}
	}

}



/*
spSystemOcc 新建的节点
spTemplateSystemOcc 选择的节点
spScopeRef MBOM关系使用
*/
/*
void CMGXChangeVersionCmd::ReBuildOperationRelationShip(CATIPLMNavOccurrence_var spSystemOcc,
	CATIPLMNavOccurrence_var spTemplateSystemOcc,
	CATIPLMNavReference_var spScopeRef)
{
	DELIPPRSystemAuth_var hPPRSystemAuth;
	::GetPPRSystemAuth(hPPRSystemAuth);
	DELIPPRSystemNav_var hPPRSystemNav;
	GetPPRSystemNav(hPPRSystemNav);

	//重建和MBOM的实施关系
	CATListPtrCATIPLMNavReference ListProcessReferences;
	hPPRSystemNav->GetProcessOfEachScope(spScopeRef, ListProcessReferences);
	for (int i = 1; i <= ListProcessReferences.Size(); ++i)
	{
		CATIPLMNavReference_var spProcessRef = ListProcessReferences[i];
		CATListPtrCATIPLMNavOccurrence ListProcessOcc;
		hPPRSystemNav->GetListOfAssignedProcesses(spTemplateSystemOcc, spProcessRef, ListProcessOcc);
		for (int j = 1; j <= ListProcessOcc.Size(); ++j)
		{
			hPPRSystemAuth->AssignProcess(spSystemOcc, ListProcessOcc[j]);
		}
	}

	//重建和资源的实施关系
	DELIPPRResourceAuth_var hPPRResourceAuth;
	::GetPPRResourceAuth(hPPRResourceAuth);
	DELIPPRResourceNav_var hPPRResourceNav;
	::GetPPRResourceNav(hPPRResourceNav);

	CATListPtrCATBaseUnknown listWhoResourceOcc;
	hPPRResourceNav->GetListWhoResource(spTemplateSystemOcc, listWhoResourceOcc);
	for (int i = 1; i <= listWhoResourceOcc.Size(); ++i)
	{
		CATIPLMNavOccurrence_var spWhoResourceOcc = listWhoResourceOcc[i];
		hPPRResourceAuth->AssignOperation(spWhoResourceOcc, spSystemOcc);
	}
	CATIPLMNavOccurrence* piWhereResourceOcc = NULL;
	hPPRResourceNav->GetWhereResource(spTemplateSystemOcc, (void**)&piWhereResourceOcc);
	if (piWhereResourceOcc != NULL)
	{
		hPPRResourceAuth->AssignOperation(piWhereResourceOcc, spSystemOcc);
	}
	CATListPtrCATIPLMNavOccurrence ListWithResourceOcc;
	hPPRResourceNav->GetWithResources(spTemplateSystemOcc, ListWithResourceOcc);
	for (int i = 1; i <= ListWithResourceOcc.Size(); ++i)
	{
		hPPRResourceAuth->AssignOperation(ListWithResourceOcc[i], spSystemOcc);
	}
}
*/