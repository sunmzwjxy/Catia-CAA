//===================================================================
// COPYRIGHT DS 2021/11/30
//===================================================================
// CAAMBOMInitCmd.cpp
// Header definition of class CAAMBOMInitCmd
//===================================================================
//
// Usage notes:
//
//===================================================================
//  2021/11/30 Creation: Code generated by the 3DS wizard
//===================================================================
#include "fengyHelper.h"
#include "CAAMBOMInitCmd.h"

#include "CUSCAAUtilService.h"
#include "CATCreateExternalObject.h"
CATCreateClass( CAAMBOMInitCmd);

//CATPLMIntegrationAccess 
#include "CATAdpPublicSecurityServices.h"
//ProductStructureUseItf 
#include "CATIPrdReferenceFactory.h"
#include "CATPrdFactory.h"
#include "CATIPLMProducts.h"
#include "CATIPrdIterator.h"
//PLMDictionaryNavServices 
#include "CATCkePLMNavPublicServices.h"
//KnowledgeInterfaces 
#include "CATIType.h"
#include "CATCkeObjectAttrReadServices.h"
#include "CATCkeObjectAttrWriteServices.h"
#include "CATICkeObject.h"
#include "CATITypeDictionary.h"
#include "CATGlobalFunctions.h"
//DELPPRProcessItf 
#include "DELPPRProcessAuthAccess.h"
#include "DELIPPRProcessNav.h"
#include "DELPPRProcessNavAccess.h"
//DELPPRSystemItf
#include "DELIPPRSystemAuth.h"
#include "DELPPRSystemAuthAccess.h"
#include "DELIPPRSystemNav.h"
#include "DELPPRSystemNavAccess.h"
//DELPPRResourceItf 
#include "DELIPPRResourceAuth.h"
#include "DELPPRResourceAuthAccess.h"
#include "DELIPPRResourceNav.h"
#include "DELPPRResourceNavAccess.h"
//DELPPRAuthFoundationInterfaces 
#include "DELIPPRUIServices.h"
#include "DELPPRUIServicesAccess.h"
//CATPLMComponentInterfaces 
#include "CATListPtrCATIPLMNavOccurrence.h"
#include "CATIPLMNavInstance.h"
//AfrFoundation 
#include "CATApplicationFrame.h"
//CATPLMIdentificationAccess 
#include "CATListPtrCATIAdpPLMIdentificator.h"
#include "CATIAdpPLMIdentificator.h"
//ProductStructureAccess
#include "CATPLMPrdCloningServices.h"

#include "CAAUtility.h"

#include "json.h"
#include <iostream>

#include "CATAdpOpenParameters.h"
#include "CATAdpOpener.h"

#include "PPRUtity.h"

#include "CATAdpMaturityServices.h"


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
CAAMBOMInitCmd::CAAMBOMInitCmd() :
CATStateCommand ("CAAMBOMInitCmd", CATDlgEngOneShot, CATCommandModeShared)
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
, _Dlg(NULL)
{
	_Dlg = new CAAMBOMInitDlg(CATApplicationFrame::GetFrame()->GetMainWindow(),"CAAMBOMInitDlg");
	_Dlg->Build();
	_serverUrl = "";
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
CAAMBOMInitCmd::~CAAMBOMInitCmd()
{
	if (_Dlg != NULL)
		_Dlg->RequestDelayedDestruction();
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void CAAMBOMInitCmd::BuildGraph()
{
	CATString oUserId, oOrganisationId, oProjectId, oRoleId;
	CATAdpPublicSecurityServices::GetSecurityParameters("PLM1", oUserId, oOrganisationId, oProjectId, oRoleId);
	CATUnicodeString strUserID(oUserId.ConvertToChar());
	cout <<"#strUserID: " << strUserID <<endl;

	SecurityContext = "SecurityContext: ctx::" + oRoleId + "." + oOrganisationId + "." + oProjectId;

	InitDlg(strUserID);

	_Dlg->SetVisibility(CATDlgShow);

	AddAnalyseNotificationCB(_Dlg, _Dlg->GetDiaCANCELNotification(), (CATCommandMethod)&CAAMBOMInitCmd::OnCancelAction, NULL);
	AddAnalyseNotificationCB(_Dlg, _Dlg->GetWindCloseNotification(), (CATCommandMethod)&CAAMBOMInitCmd::OnCancelAction, NULL);
	AddAnalyseNotificationCB(_Dlg, _Dlg->GetDiaOKNotification(), (CATCommandMethod)&CAAMBOMInitCmd::OnOKAction, NULL);
}

void CAAMBOMInitCmd::InitDlg(CATUnicodeString strUserID)
{
	_Dlg->SetUserName(strUserID);
	CATUnicodeString ResourceId = "KnowledgeResources|Config_TXT";
	CATUnicodeString strConfigFile = "";
	CAAUtility::RetrieveFileFromResourceTable(ResourceId, strConfigFile);
	std::cout << "配置文件路径：" << strConfigFile << std::endl;
	if (strConfigFile == "")
	{
		CAAUtility::MessageBoxShow("无法在ResourceTabale中找到配置文件", "提示");
		RequestDelayedDestruction();
		return;
	}

	CATUnicodeString serverUrl = CAAUtility::GetConfigInfoFromFile(strConfigFile,"ServerUrl");
	std::cout << "服务地址：" << serverUrl << std::endl;
	_serverUrl = serverUrl;
	CATUnicodeString strURL = serverUrl + "/resources/CUSVPMReference/CUSVPMReferenceWebService/getFOTask?userid=" + strUserID;
	//CAAUtility::MessageBoxShow(strURL, "提示");
	//CATUnicodeString retMsg = CAAUtility::WebService(strURL);
	CATUnicodeString retMsg = CUSCAAUtilService::WebService(SecurityContext, strURL);

	//CAAUtility::MessageBoxShow(retMsg, "提示");

	std::cout << "服务返回信息：" << retMsg << std::endl;

	//retMsg = "{\"data\":[{\"MPRFormNum\":\"MPR_5311W07111G701-901\",\"MPRType\":\"普通\",\"PartNumber\":\"prd-14182662-00097729\",\"PartRevision\":\"A.1\"}],\"message\":\"\",\"status\":\"success\"}";
	//retMsg = "{\"data\":[{\"MPRFormNum\":\"MPR_5311W07111G701-901\",\"MPRType\":\"普通\",\"PartNumber\":\"prd-53783455-00018974\",\"PartRevision\":\"A.1\"}],\"message\":\"\",\"status\":\"success\"}";
	
	Json::Reader reader;
	Json::Value rootData;
	const char* jsonstr = retMsg.ConvertToChar();
	if (reader.parse(jsonstr,rootData))
	{
		CATUnicodeString strStatus = rootData["status"].asString().c_str();
		if (strStatus == "success")
		{
			Json::Value Data = rootData["data"];
			int size = Data.size();
			for (int i = 0; i < size; ++i)
			{
				CATUnicodeString FOState = Data[i]["FOCurrent"].asString().c_str();
				FOState = FOState.Strip(CATUnicodeString::CATStripModeBoth, ' ');
				if (FOState == CATUnicodeString("IN_WORK"))
				{
					FOState = "工作中";
				}
				else if (FOState == CATUnicodeString("FROZEN"))
				{
					FOState = "冻结";
				}
				else if (FOState == CATUnicodeString("RELEASED"))
				{
					FOState = "发布";
					continue;
				}

				CATUnicodeString MPRFormNum = Data[i]["MPRFormNum"].asString().c_str();
				MPRFormNum = MPRFormNum.Strip(CATUnicodeString::CATStripModeBoth, ' ');
				CATUnicodeString MPRType = Data[i]["mprType"].asString().c_str();
				MPRType = MPRType.Strip(CATUnicodeString::CATStripModeBoth, ' ');

				CATUnicodeString MPRTime = Data[i]["MPRApprovedDate"].asString().c_str();
				MPRTime = MPRTime.Strip(CATUnicodeString::CATStripModeBoth, ' ');
				CATUnicodeString MPRRevision = Data[i]["MPRRevision"].asString().c_str();
				MPRRevision = MPRRevision.Strip(CATUnicodeString::CATStripModeBoth, ' ');

				CATUnicodeString PartNumber = Data[i]["partNum"].asString().c_str();
				PartNumber = PartNumber.Strip(CATUnicodeString::CATStripModeBoth,' ');
				CATUnicodeString PartRevision = Data[i]["partRev"].asString().c_str();
				PartRevision = PartRevision.Strip(CATUnicodeString::CATStripModeBoth, ' ');
				CATUnicodeString FOName = Data[i]["FOName"].asString().c_str();				
				FOName = FOName.Strip(CATUnicodeString::CATStripModeBoth, ' ');
				CATUnicodeString FORevision = Data[i]["FORevision"].asString().c_str();
				FORevision = FORevision.Strip(CATUnicodeString::CATStripModeBoth, ' ');
				CATUnicodeString FODisRevision = Data[i]["FODisplayRevision"].asString().c_str();
				FODisRevision = FODisRevision.Strip(CATUnicodeString::CATStripModeBoth, ' ');
				CATUnicodeString MPRId = Data[i]["MPRID"].asString().c_str();
				MPRId = MPRId.Strip(CATUnicodeString::CATStripModeBoth, ' ');
				CATUnicodeString IsRevise = Data[i]["isRevise"].asString().c_str();
				IsRevise = IsRevise.Strip(CATUnicodeString::CATStripModeBoth, ' ');

				FOTask fo;
				fo.MPRFormNum = MPRFormNum;
				fo.MPRType = MPRType;
				fo.MPRRevision = MPRRevision;
				fo.MPRTime = MPRTime;
				fo.PartNumber = PartNumber;
				fo.PartRevision = PartRevision;
				fo.FOName = FOName;
				fo.FORevision = FORevision;
				fo.FODisRevision = FODisRevision;
				fo.FOState = FOState;
				fo.MPRId = MPRId;
				fo.IsRevise = IsRevise;

				_FOVect.push_back(fo);
			}
		}
		else
		{
			CATUnicodeString strMessage = rootData["message"].asString().c_str();
			//CAAUtility::MessageBoxShow("获取FO任务失败：" + strMessage, "提示");
			CAAUtility::MessageBoxShow("获取MPR任务失败：" + strMessage, "提示");
			RequestDelayedDestruction();
			return;
		}
	}
	_Dlg->InitMultiList(_FOVect);
}

void CAAMBOMInitCmd::OnCancelAction()
{
	RequestDelayedDestruction();
}

void CAAMBOMInitCmd::OnOKAction()
{
	int index = _Dlg->GetSelectRow();
	if (index == -1)
	{
		return;
	}

	CATUnicodeString strPrdID = _FOVect[index].PartNumber;
	CATUnicodeString strPrdRevision = _FOVect[index].PartRevision;

	CATUnicodeString strMPRId = _FOVect[index].MPRId;		
	CATUnicodeString strFOName = _FOVect[index].FOName;
	CATUnicodeString strFORevision = _FOVect[index].FORevision;
	CATUnicodeString strFODisRevision = _FOVect[index].FODisRevision;
	CATUnicodeString strFOState = _FOVect[index].FOState;

	cout << "Part Number is: " << strPrdID << endl;

	CATListOfCATString listOfAttribute;
	CATListOfCATUnicodeString listOfValues;
	CATIAdpPLMIdentificator* opiIdentOnPLMComp;
	listOfAttribute.Append("PLM_ExternalID");
	listOfAttribute.Append("revision");
	listOfValues.Append(strPrdID);
	listOfValues.Append(strPrdRevision);
	const char* strPLMType = "VPMReference";
	CAAUtility::RetrieveIDofUniquePLMObject(listOfAttribute, listOfValues, strPLMType, opiIdentOnPLMComp);
	if (opiIdentOnPLMComp == NULL)
	{
		//CAAUtility::MessageBoxShow("选择的FO任务关联的MPR对象在数据库中不存在", "提示");
		CAAUtility::MessageBoxShow("选择的MPR任务关联的MPR对象在数据库中不存在", "提示");
		return;
	}

	//// 法一 调用
	//CATOmbLifeCycleRootsBag ioBag;
	//CATIPLMComponent_var spPrdComp = CAAUtility::GetComponentFromPLMID(opiIdentOnPLMComp, ioBag);


	// 法二  主函数中直接写 从id - component
	CATIPLMComponent_var spPrdComp = NULL_var;
	CATAdpOpenParameters ModRef( CATAdpExpandParameters::Authoring);
	CATAdpOpenParameters::LoadingMode iLoadMode = ModRef.EditMode;
	ModRef.SetLoadingMode(iLoadMode); 

	CATOmbLifeCycleRootsBag ioBag;
	CATAdpOpener AdpOpener(ioBag, ModRef);

	CATIPLMNavReference* ptmpRef = NULL;
	AdpOpener.CompleteAndOpen(opiIdentOnPLMComp, IID_CATIPLMNavReference, (void**)&ptmpRef);
	if (!ptmpRef)
		cout << "CompleteAndOpen  ptmpRef KO!" << endl;
	else
		cout << "CompleteAndOpen  ptmpRef OK!" << endl;

	ptmpRef->QueryInterface(IID_CATIPLMComponent, (void**)&spPrdComp);

	spPrdComp = ptmpRef;

	if (spPrdComp == NULL_var)
	{
		CAAUtility::MessageBoxShow("选择的MPR任务关联的MPR对象无法打开", "提示");
		//CAAUtility::MessageBoxShow("选择的FO任务关联的MPR对象无法打开", "提示");
		return;
	}

	CATCkeObjectAttrReadServices::GetValueAsString(spPrdComp, "V_Name", _strMPRitle);
	_strMPRitle.ReplaceSubString("M", "");

	//创建PPR节点
	CATUnicodeString strPPRTitle = "PPR" + _strMPRitle;
	CATIPLMProducts_var spPPRPrd = CreatePPRProduct(ioBag, strPPRTitle);
	if (spPPRPrd == NULL_var)
	{
		RequestDelayedDestruction();
		return;
	}

	CATIPLMComponent_var spPPRComp = NULL_var;
	spPPRPrd->QueryInterface(IID_CATIPLMComponent, (void**)&spPPRComp);
	
	CAAUtility::OpenPLMComponent(spPPRComp);		// open editor window

	int NbChildren = 0;
	spPPRPrd->Count(NbChildren);
	if (NbChildren != 0)				// 该FO任务对应的PPR结构已经存在
	{
		CheckFORevise(spPPRPrd, _FOVect[index]);
		RequestDelayedDestruction();
		return;
	}

	CATCkeObjectAttrWriteServices::SetValueWithString(spPPRComp, "V_Name", strPPRTitle);
	CATCkeObjectAttrWriteServices::SetValueWithString(spPPRComp, "PLM_ExternalID", strPPRTitle);

	DELIPPRUIServices_var spPPRUIService = NULL_var;
	::GetPPRUIServices(spPPRUIService);

	//新建EBOM根节点
	CATUnicodeString strEBOMTitle = "ME" + _strMPRitle;
	CATIPLMProducts_var spEBOMPrd = CreateProduct("VPMReference", strEBOMTitle);
	CATBaseUnknown* pEBOMInstance = NULL;
	spPPRPrd->AddProduct(spEBOMPrd, pEBOMInstance);
	ReleasePtr_A(pEBOMInstance);
	CATIPLMNavReference_var spRootPrdRef = NULL_var;
	spEBOMPrd->QueryInterface(IID_CATIPLMNavReference, (void**)&spRootPrdRef);
	CATIPLMNavOccurrence_var spRootPrdOcc = NULL_var;
	CAAUtility::GetRootOccurrenceFromRootProductReference(spRootPrdRef, spRootPrdOcc);

	//在EBOM根节点下挂接MPR父节点
	CATIPLMProducts_var pMPRPrd = NULL_var;
	spPrdComp->QueryInterface(IID_CATIPLMProducts,(void**)&pMPRPrd);
	CATBaseUnknown* pMPRInstance = NULL;
	spEBOMPrd->AddProduct(pMPRPrd, pMPRInstance);
	CATIPLMNavInstance_var spMPRInst = pMPRInstance;
	CATIPLMNavOccurrence_var spMPROcc = NULL_var;
	CAAUtility::GetOccurrenceFromProductInstance(spMPRInst, spRootPrdOcc, spRootPrdOcc, spMPROcc);
	ReleasePtr_A(pMPRInstance);

	//创建资源节点
	CATUnicodeString strRootResourceTitle = "MR" + _strMPRitle;
	CATIPLMNavReference_var spRootResourceRef = CreateResource("OrganizationalRef", strRootResourceTitle);
	if (spRootResourceRef != NULL_var)
	{
		CATIPLMProducts_var spResourcePrd = NULL_var;
		spRootResourceRef->QueryInterface(IID_CATIPLMProducts,(void**)&spResourcePrd);
		CATBaseUnknown* pRootResourceInst = NULL;
		spPPRPrd->AddProduct(spResourcePrd, pRootResourceInst);
		//子节点
		CATUnicodeString strSubResourceTitle = "M" + _strMPRitle;
		CATIPLMNavReference_var spSubResourceRef = CreateSubResource("Organizational", strSubResourceTitle);
		CATIPLMProducts_var spSubResourcePrd = NULL_var;
		spSubResourceRef->QueryInterface(IID_CATIPLMProducts, (void**)&spSubResourcePrd);
		CATBaseUnknown* pSubResourceInst = NULL;
		spResourcePrd->AddProduct(spSubResourcePrd, pSubResourceInst);
	}

	//创建MBOM节点
	CATUnicodeString strMBOMTitle = "MP" + _strMPRitle;
	CATIPLMNavReference_var spMBOMRef = CreatePPRProcess("CreateAssembly", strMBOMTitle);
	if (spMBOMRef != NULL_var)
	{
		spPPRUIService->AddPPRRootToCurrentEditor(spMBOMRef);
		//创建scope关系
		DELIPPRProcessAuth_var hPPRProcessAuth;
		::GetPPRProcessAuth(hPPRProcessAuth);
		hPPRProcessAuth->CreateScope(spMBOMRef, spRootPrdRef);
		//根据MPR结果创建MBOM结构
		CATIPLMNavOccurrence_var spRootPrcocessOcc = NULL_var;
		CAAUtility::GetRootOccurrenceFromRootProcessReference(spMBOMRef, spRootPrcocessOcc);
		CreateSubMBOMStructure(hPPRProcessAuth, spMBOMRef, spRootPrcocessOcc, spMPROcc);
	}

	//创建workplan节点
	CATUnicodeString strBOPTitle = "MF" + _strMPRitle + _majRevision;
	CATIPLMNavReference_var spBOPRef = CreateWorkPlan("DELLmiWorkPlanSystemReference", strBOPTitle);
	if (spBOPRef != NULL_var)
	{
		spPPRUIService->AddPPRRootToCurrentEditor(spBOPRef);
		////创建scope关系
		DELIPPRSystemAuth_var hPPRSystemAuth;
		::GetPPRSystemAuth(hPPRSystemAuth);
		hPPRSystemAuth->CreateScope(spBOPRef, spMBOMRef);

		DELIPPRResourceAuth_var hPPRResourceAuth;
		::GetPPRResourceAuth(hPPRResourceAuth);
		hPPRResourceAuth->CreateScope(spRootResourceRef, spBOPRef);

		////创建子节点  
		//CATUnicodeString strSubBOPTitle = "FO" + _strMPRitle + _majRevision;
		//CATIType_var spiType = NULL_var;
		//CAAUtility::RetrievePLMType("CUS_FO", spiType);
		//CATIPLMNavInstance* spSubBOPInst = NULL;
		//hPPRSystemAuth->CreateSubSystemOrOperation(spBOPRef, spiType,(void**)&spSubBOPInst);
		//CATIPLMNavReference* spSubBOPRef = NULL;
		//spSubBOPInst->GetReferenceInstanceOf(spSubBOPRef);
		//CATCkeObjectAttrWriteServices::SetValueWithString(spSubBOPRef, "V_Name", strSubBOPTitle);

		// insert 之前先搜索  FOName FORevision！―― fengy
		// 搜索FO 
		cout << "#选中 FOName: " << strFOName << endl;
		cout << "#选中 FORevision: " << strFORevision << endl;

		CATListOfCATString listOfAttribute2;
		CATListOfCATUnicodeString listOfValues2;
		CATIAdpPLMIdentificator* opiIdentOnPLMComp2;
		listOfAttribute2.Append("PLM_ExternalID");
		//listOfAttribute2.Append("V_Name");
		listOfAttribute2.Append("revision");
		listOfValues2.Append(strFOName);
		listOfValues2.Append(strFORevision);
		const char* strPLMType2 = TYPE_CUS_FO_Workplan;
		CAAUtility::RetrieveIDofUniquePLMObject(listOfAttribute2, listOfValues2, strPLMType2, opiIdentOnPLMComp2);
		if (opiIdentOnPLMComp2 == NULL)
		{
			//CAAUtility::MessageBoxShow("搜索不到FO ，by FOName，FORevision：" + strFOName + " ，" + strFORevision, "提示");
			CAAUtility::MessageBoxShow("搜索不到MPR ，by FOName，FORevision：" + strFOName + " ，" + strFORevision, "提示");
			return;
		}

		CATIPLMNavReference* ptmpRef2 = NULL;
		AdpOpener.CompleteAndOpen(opiIdentOnPLMComp2, IID_CATIPLMNavReference, (void**)&ptmpRef2);
		if (!ptmpRef2)
			cout << "CompleteAndOpen  ptmpRef2 KO!" << endl;
		else
			cout << "CompleteAndOpen  ptmpRef2 OK!" << endl;

		// insert FO
		PPRUtity spPPRUtity;
		CATIPLMNavInstance* spSubBOPInst2 = NULL;
		spPPRUtity.InsertExistSystem(spBOPRef, ptmpRef2, (CATBaseUnknown *&)spSubBOPInst2);
		
		////CATIPLMNavReference* spSubBOPRef2 = NULL;
		////((CATIPLMNavInstance*)spSubBOPInst2 )->GetReferenceInstanceOf(spSubBOPRef2);
		//
		////CATUnicodeString strSubBOPTitle2 = "FO" + _strMPRitle + _majRevision;
		////CATCkeObjectAttrWriteServices::SetValueWithString(spSubBOPRef2, "V_Name", strSubBOPTitle2);
		//
		//CATIType_var spiType2 = NULL_var;
		//CAAUtility::RetrievePLMType(TYPE_FO_OP, spiType2);
		//hPPRSystemAuth->CreateSubSystemOrOperation(spBOPRef, spiType2, (void**)&spSubBOPInst2);

		// ======================================================================================
		// 5- Read the current state and the possible transitions which can be applied on the current state
		// ======================================================================================
		CATUnicodeString CurrentState;
		CATListValCATUnicodeString ListOfPossibleTransitions;
		HRESULT rc = CATAdpMaturityServices::GetStateAndPossibleTransitions(opiIdentOnPLMComp2, CurrentState, ListOfPossibleTransitions);
		if (FAILED(rc))
		{
			fengyHelper::Notify("GetStateAndPossibleTransitions  KO!");
			return;
		}

		//  Output the values retrieved above
		cout << "   The current maturity state of the component is: " << CurrentState.ConvertToChar() << endl;

		int NumberOfPossibleTransitions = ListOfPossibleTransitions.Size();
		cout << "   The transitions possible from the current state are: " << endl;
		for (int i = 1; i <= NumberOfPossibleTransitions; i++)
		{
			CATUnicodeString TransitionName = ListOfPossibleTransitions[i];
			cout << "\t\t" << TransitionName.ConvertToChar() << endl;
		}

		//提升工作中   ptmpRef2  ApplyMaturityTransition opiIdentOnPLMComp2
		CATUnicodeString InputTransitionName = "IN_WORK";
		CATUnicodeString InputTransitionName2 = "ShareWithinProject";

		if ( CurrentState == InputTransitionName2 || CurrentState == InputTransitionName )
			cout << "The current maturity state is Already : " << CurrentState.ConvertToChar() << "not neccssary ApplyMaturityTransition!" << endl;
		else
		{
			
			rc = CATAdpMaturityServices::ApplyMaturityTransition(opiIdentOnPLMComp2, InputTransitionName2);	// apply must use "ShareWithinProject"
			if (FAILED(rc))
				cout << "FAILED at: ApplyMaturityTransition " << InputTransitionName2 << endl;
			else
				cout << "OK : ApplyMaturityTransition " << InputTransitionName2 << endl;
		}
	}

	CATListPtrCATBaseUnknown SaveRoots;
	CATBaseUnknown* piBaseUnk = NULL;
	spPPRComp->QueryInterface(IID_CATBaseUnknown,(void**)&piBaseUnk);
	SaveRoots.Append(piBaseUnk);
	CATUnicodeString strMsg = CAAUtility::PLMSave(&SaveRoots);
	if (strMsg == "Success")
	{
		strMsg = "PPR创建成功";
	}
	CAAUtility::MessageBoxShow(strMsg, "提示");

	CATUnicodeString strURL = _serverUrl + "/resources/CUSVPMReferenceWebService/connectMPRToFO?mprId=" + strMPRId +"&foName="+ strFOName +"&foRevision"+ strFORevision;
	cout << "#添加WebService: " << strURL << endl;

	CATUnicodeString retMsg = CUSCAAUtilService::WebService(SecurityContext, strURL);


	RequestDelayedDestruction();
}

CATIPLMProducts_var CAAMBOMInitCmd::CreatePPRProduct(CATOmbLifeCycleRootsBag& ioBag, CATUnicodeString strPPRTitle)
{
	CATIPLMComponent_var spPPRTemplate = NULL_var;
	CATUnicodeString ResourceId = "KnowledgeResources|PPRTemplate";
	CAAUtility::RetrieveObjectFromResourceTable(ResourceId, spPPRTemplate);
	if (spPPRTemplate == NULL_var)
	{
		CAAUtility::MessageBoxShow("无法在ResourceTabale中找到配置的PPR模板", "提示");
		return NULL_var;
	}
	CATUnicodeString strPPRTemplateID = "";
	CATCkeObjectAttrReadServices::GetValueAsString(spPPRTemplate, "PLM_ExternalID", strPPRTemplateID);
	CATUnicodeString strPPRTemplateRev = "";
	CATCkeObjectAttrReadServices::GetValueAsString(spPPRTemplate, "revision", strPPRTemplateRev);

	CATUnicodeString iIdCloningString = strPPRTitle + "-";
	/*CATUnicodeString strPrdID = "ppr-53783455-00001268";
	CATUnicodeString strPrdRevision = "A.1";*/

	CATListOfCATString listOfAttribute;
	CATListOfCATUnicodeString listOfValues;
	CATIAdpPLMIdentificator* opiIdentOnPLMComp = NULL;
	listOfAttribute.Append("PLM_ExternalID");
	listOfAttribute.Append("revision");
	listOfValues.Append(strPPRTitle);
	listOfValues.Append(strPPRTemplateRev);
	const char* strPLMType = "PPRContext";
	CAAUtility::RetrieveIDofUniquePLMObject(listOfAttribute, listOfValues, strPLMType, opiIdentOnPLMComp);
	if (opiIdentOnPLMComp == NULL)
	{
		spPPRTemplate->GetAdpID(opiIdentOnPLMComp);

		CATLISTP(CATIAdpPLMIdentificator) listofIdent;
		CATLISTP(CATIAdpPLMIdentificator) listofNewIdent;
		listofIdent.Append(opiIdentOnPLMComp);

		CATPLMPrdCloningServices::CloneProductStructures(listofIdent, iIdCloningString, listofNewIdent);
		if (listofNewIdent.Size() == 0)
		{
			CAAUtility::MessageBoxShow("PPR根节点创建失败", "提示");
			return NULL_var;
		}
		opiIdentOnPLMComp = listofNewIdent[1];
	}
	
	CATIPLMComponent_var spPrdComp = CAAUtility::GetComponentFromPLMID(opiIdentOnPLMComp, ioBag);
	
	CATIPLMProducts* pPPR = NULL;
	spPrdComp->QueryInterface(IID_CATIPLMProducts,(void**)&pPPR);
	return pPPR;
}

CATIPLMProducts_var CAAMBOMInitCmd::CreateProduct(CATUnicodeString iStrType, CATUnicodeString iPrdTitle)
{
	CATIPrdReferenceFactory* piPrdFactory = NULL;
	CATPrdFactory::CreatePrdFactory(IID_CATIPrdReferenceFactory,(void**)&piPrdFactory);
	CATIType_var spiType = NULL_var;
	CAAUtility::RetrievePLMType(iStrType, spiType);
	CATListValCATICkeParm_var iPrdAttributesValues;
	CATIPLMProducts* opReference = NULL;
	piPrdFactory->CreatePrdReference(spiType, iPrdAttributesValues, opReference);
	CATIPLMNavReference_var spNewPrdRef = opReference;
	CATCkeObjectAttrWriteServices::SetValueWithString(spNewPrdRef, "V_Name", iPrdTitle);
	return opReference;
}

CATIPLMNavReference_var CAAMBOMInitCmd::CreateResource(CATUnicodeString iStrType, CATUnicodeString iResourceTitle)
{
	CATITypeDictionary_var hTypeDic = CATGlobalFunctions::GetTypeDictionary();
	CATIType_var spiType = NULL_var;
	hTypeDic->FindTypeInPackage(iStrType,"PLMResourceTypePackage", spiType);

	DELIPPRResourceAuth_var hPPRResourceAuth;
	::GetPPRResourceAuth(hPPRResourceAuth);
	CATIPLMNavReference* pNewRef = NULL;
	hPPRResourceAuth->CreateResource(spiType, (void**)&pNewRef);
	CATCkeObjectAttrWriteServices::SetValueWithString(pNewRef, "V_Name", iResourceTitle);
	return pNewRef;
}

CATIPLMNavReference_var CAAMBOMInitCmd::CreateSubResource(CATUnicodeString iStrType, CATUnicodeString iResourceTitle)
{
	DELIPPRResourceAuth_var hPPRResourceAuth;
	::GetPPRResourceAuth(hPPRResourceAuth);
	CATIType_var spiType = NULL_var;
	CAAUtility::RetrievePLMType(iStrType, spiType);
	CATIPLMNavReference* pNewRef = NULL;
	hPPRResourceAuth->CreateResource(spiType, (void**)&pNewRef);
	CATCkeObjectAttrWriteServices::SetValueWithString(pNewRef, "V_Name", iResourceTitle);
	return pNewRef;
}

CATIPLMNavReference_var CAAMBOMInitCmd::CreatePPRProcess(CATUnicodeString iStrType, CATUnicodeString iProcessTitle)
{
	DELIPPRProcessAuth_var hPPRProcessAuth;
	::GetPPRProcessAuth(hPPRProcessAuth);
	CATIType_var spiType = NULL_var;
	CAAUtility::RetrievePLMType(iStrType, spiType);
	CATIPLMNavReference* pNewRef = NULL;
	hPPRProcessAuth->CreateProcess(spiType,(void**)&pNewRef);
	CATCkeObjectAttrWriteServices::SetValueWithString(pNewRef, "V_Name", iProcessTitle);
	return pNewRef;
}

CATIPLMNavReference_var CAAMBOMInitCmd::CreateWorkPlan(CATUnicodeString iStrType, CATUnicodeString iWorkPlanTitle)
{
	DELIPPRSystemAuth_var hPPRSystemAuth;
	::GetPPRSystemAuth(hPPRSystemAuth);
	CATIType_var spiType = NULL_var;
	CAAUtility::RetrievePLMType(iStrType, spiType);
	CATIPLMNavReference* pNewRef = NULL;
	hPPRSystemAuth->CreateSystem(spiType, (void**)&pNewRef);
	CATCkeObjectAttrWriteServices::SetValueWithString(pNewRef, "V_Name", iWorkPlanTitle);
	return pNewRef;
}

void CAAMBOMInitCmd::CreateSubMBOMStructure(DELIPPRProcessAuth_var& hPPRProcessAuth, CATIPLMNavReference_var& ispRootMBOMRef, CATIPLMNavOccurrence_var& spMBOMOcc, CATIPLMNavOccurrence_var& spPrdOcc)
{
	CATIPLMNavReference* pPrdRef = NULL;
	spPrdOcc->GetRelatedReference(pPrdRef);
	CATUnicodeString sPrdTitle = "";
	CATCkeObjectAttrReadServices::GetValueAsString(pPrdRef, "V_Name", sPrdTitle);
	CATUnicodeString sPrdUsage = "";
	CATCkeObjectAttrReadServices::GetValueAsString(pPrdRef, "V_usage", sPrdUsage);
	if (sPrdUsage == "3DPart")
	{
		CATIPLMNavReference_var spSubRef = CAAMBOMInitCmd::CreatePPRProcess("CreateMaterial", sPrdTitle);
		CATIPLMNavOccurrence* piSubOcc = NULL;
		hPPRProcessAuth->InsertPredecessor(spMBOMOcc, spSubRef, ispRootMBOMRef,(void**)&piSubOcc);
		hPPRProcessAuth->AssignProduct(piSubOcc, spPrdOcc);
		if (sPrdTitle == _strMPRitle)
		{
			CATCkeObjectAttrReadServices::GetValueAsString(pPrdRef, "V_version", _majRevision);
		}
	}
	else
	{
		CATIPLMNavReference_var spSubRef = CAAMBOMInitCmd::CreatePPRProcess("CreateAssembly", sPrdTitle);
		CATIPLMNavOccurrence* piSubOcc = NULL;
		hPPRProcessAuth->InsertPredecessor(spMBOMOcc, spSubRef, ispRootMBOMRef, (void**)&piSubOcc);

		CATListPtrCATIPLMNavOccurrence listPrdChildren;
		spPrdOcc->ListChildren(listPrdChildren);
		for (int i = 1; i <= listPrdChildren.Size(); ++i)
		{
			CATIPLMNavOccurrence_var spChildOcc = listPrdChildren[i];
			CATIPLMNavOccurrence_var spSubOcc = piSubOcc;
			CreateSubMBOMStructure(hPPRProcessAuth, ispRootMBOMRef, spSubOcc, spChildOcc);
		}
	}
}

void CAAMBOMInitCmd::CheckFORevise(CATIPLMProducts_var& spPPRPrd, FOTask& foInfo)
{
	CATIPrdIterator* opIterator = NULL;
	spPPRPrd->Iterator(opIterator,IID_CATIPLMNavInstance);
	if (opIterator == NULL)
	{
		return;
	}
	CATIPLMNavReference_var spRootPrdRef = NULL_var;
	CATIPLMNavReference_var spRootResourceRef = NULL_var;

	CATBaseUnknown* piNavInst = NULL;
	while (SUCCEEDED(opIterator->Next(piNavInst)))
	{
		CATIPLMNavInstance_var spNavInst = piNavInst;
		CATIPLMNavReference* piNavRef = NULL;
		spNavInst->GetReferenceInstanceOf(piNavRef);
		CATUnicodeString discipline = "";
		CATCkeObjectAttrReadServices::GetValueAsString(piNavRef, "V_discipline", discipline);
		if (discipline == "Organizational")
		{
			spRootResourceRef = piNavRef;
		}
		else
		{
			spRootPrdRef = piNavRef;
		}
		piNavInst->Release(); piNavInst = NULL;
	}
	opIterator->Release(); opIterator = NULL;

	CATIPLMNavOccurrence_var spRootPrdOcc = NULL_var;
	CAAUtility::GetRootOccurrenceFromRootProductReference(spRootPrdRef, spRootPrdOcc);

	CATIPLMProducts* piRootPrd = NULL;
	spRootPrdRef->QueryInterface(IID_CATIPLMProducts,(void**)&piRootPrd);

	if (!CheckMPRRevision(spRootPrdOcc, foInfo))//最新的MPR零件未挂在EBOM节点下
	{
		CATListOfCATString listOfAttribute;
		CATListOfCATUnicodeString listOfValues;
		CATIAdpPLMIdentificator* opiIdentOnPLMComp;
		listOfAttribute.Append("PLM_ExternalID");
		listOfAttribute.Append("revision");
		listOfValues.Append(foInfo.PartNumber);
		listOfValues.Append(foInfo.PartRevision);
		const char* strPLMType = "VPMReference";
		CAAUtility::RetrieveIDofUniquePLMObject(listOfAttribute, listOfValues, strPLMType, opiIdentOnPLMComp);
		if (opiIdentOnPLMComp != NULL)
		{
			CATOmbLifeCycleRootsBag ioBag;
			CATIPLMComponent_var spPrdComp = CAAUtility::GetComponentFromPLMID(opiIdentOnPLMComp, ioBag);

			if (spPrdComp != NULL_var)
			{
				CATIPLMProducts_var pMPRPrd = NULL_var;
				spPrdComp->QueryInterface(IID_CATIPLMProducts, (void**)&pMPRPrd);
				CATBaseUnknown* pMPRInstance = NULL;
				piRootPrd->AddProduct(pMPRPrd, pMPRInstance);
			}
		}
	}

	//判断FO是否升版
	if (foInfo.IsRevise == "N")
	{
		return;
	}

	//获取关联的MBOM
	DELIPPRProcessNav_var hPPRProcessNav;
	GetPPRProcessNav(hPPRProcessNav);
	CATListPtrCATIPLMNavReference ListProcessReferences;
	hPPRProcessNav->GetProcessOfEachScope(spRootPrdRef, ListProcessReferences);
	if (ListProcessReferences.Size() == 0)
	{
		CAAUtility::MessageBoxShow("MBOM节点找不到", "提示");
		return;
	}
	CATIPLMNavReference_var spRootProcessRef = ListProcessReferences[1];

	//获取关联的System
	DELIPPRSystemNav_var hPPRSystemNav;
	GetPPRSystemNav(hPPRSystemNav);
	CATListPtrCATIPLMNavReference ListSystemReferences;
	hPPRSystemNav->GetSystemOfEachScope(spRootProcessRef, ListSystemReferences);
	if (ListSystemReferences.Size() == 0)
	{
		CAAUtility::MessageBoxShow("System节点找不到", "提示");
		return;
	}
	CATIPLMNavReference_var spRootSystemRef = ListSystemReferences[1];

	CATIPLMNavOccurrence_var  spRootSystemOcc = NULL_var;
	CAAUtility::GetRootOccurrenceFromRootSystemReference(spRootSystemRef, spRootSystemOcc);

	CATIPLMNavOccurrence_var  spCurrentFOOcc = NULL_var;

	CATListPtrCATIPLMNavOccurrence FOList;
	spRootSystemOcc->ListChildren(FOList);
	for (int i = 1; i <= FOList.Size(); ++i)
	{
		CATIPLMNavOccurrence_var spFOOcc = FOList[i];
		CATIPLMNavReference* piFORef = NULL;
		spFOOcc->GetRelatedReference(piFORef);
		CATUnicodeString FOType = CAAUtility::GetObjectTypeName(piFORef);
		if (FOType != TYPE_CUS_FO_Workplan)
		{
			continue;
		}
		CATUnicodeString PLMID = "";
		CATCkeObjectAttrReadServices::GetValueAsString(piFORef, "PLM_ExternalID", PLMID);
		CATUnicodeString Revision = "";
		CATCkeObjectAttrReadServices::GetValueAsString(piFORef, "revision", Revision);

		if (PLMID == foInfo.FOName && Revision == foInfo.FORevision)
		{
			return;
		}
		spCurrentFOOcc = spFOOcc;
	}

	CATIPLMNavOccurrence_var  spNewFOOcc = NULL_var;

	CATListOfCATString listOfAttribute2;
	CATListOfCATUnicodeString listOfValues2;
	CATIAdpPLMIdentificator* opiIdentOnPLMComp2;
	listOfAttribute2.Append("PLM_ExternalID");
	listOfAttribute2.Append("revision");
	listOfValues2.Append(foInfo.FOName);
	listOfValues2.Append(foInfo.FORevision);
	const char* strPLMType2 = TYPE_CUS_FO_Workplan;
	CAAUtility::RetrieveIDofUniquePLMObject(listOfAttribute2, listOfValues2, strPLMType2, opiIdentOnPLMComp2);
	if (opiIdentOnPLMComp2 == NULL)
	{
		CATOmbLifeCycleRootsBag ioBag;
		CATIPLMComponent_var spPrdComp = CAAUtility::GetComponentFromPLMID(opiIdentOnPLMComp2, ioBag);
		CATIPLMNavReference* ptmpRef = NULL;
		spPrdComp->QueryInterface(IID_CATIPLMNavReference,(void**)&ptmpRef);

		PPRUtity spPPRUtity;
		CATIPLMNavInstance* piNewFOInst = NULL;
		spPPRUtity.InsertExistSystem(spRootSystemRef, ptmpRef, (CATBaseUnknown *&)piNewFOInst);

		CATIPLMNavInstance_var spNewFOInst = piNewFOInst;
		CUSCAAUtilService::GetOccurrenceFromSystemInstance(spNewFOInst, spRootSystemOcc, spNewFOOcc);
	}

	//重建FO的Scope关系
	//ReBuildRelationShip(spCurrentFOOcc, spNewFOOcc, spRootProcessRef);
	
	//重建FO下的工序的实施关系
	CATListPtrCATIPLMNavOccurrence newGXList;
	spNewFOOcc->ListChildren(newGXList);
	CATListPtrCATIPLMNavOccurrence currentGXList;
	spCurrentFOOcc->ListChildren(currentGXList);
	for (int i = 1; i <= newGXList.Size(); ++i)
	{
		CATIPLMNavOccurrence_var spNewGXOcc = newGXList[i];
		CATIPLMNavReference* piNewGXRef = NULL;
		spNewGXOcc->GetRelatedReference(piNewGXRef);
		CATUnicodeString PLMID = "";
		CATCkeObjectAttrReadServices::GetValueAsString(piNewGXRef, "PLM_ExternalID", PLMID);
		for (int j = 1; j <= currentGXList.Size(); ++j)
		{
			CATIPLMNavOccurrence_var spCurrentGXOcc = currentGXList[j];
			CATIPLMNavReference* piCurrentGXRef = NULL;
			spCurrentGXOcc->GetRelatedReference(piCurrentGXRef);
			CATUnicodeString curPLMID = "";
			CATCkeObjectAttrReadServices::GetValueAsString(piCurrentGXRef, "PLM_ExternalID", curPLMID);
			if (PLMID == curPLMID)
			{
				ReBuildRelationShip(spCurrentGXOcc, spNewGXOcc, spRootProcessRef);
				break;
			}
		}
	}

	CATUnicodeString strMsg = CAAUtility::PLMSave();
	if (strMsg != "Success")
	{
		CAAUtility::MessageBoxShow(strMsg, "提示");
	}
}

bool CAAMBOMInitCmd::CheckMPRRevision(CATIPLMNavOccurrence_var spRootPrdOcc, FOTask& foInfo)
{
	CATListPtrCATIPLMNavOccurrence ChildrenList;
	spRootPrdOcc->ListChildren(ChildrenList);
	int n_child_size = ChildrenList.Size();
	for (int i = 1; i <= n_child_size; ++i)
	{
		CATIPLMNavOccurrence_var spChildOcc = ChildrenList[i];
		CATIPLMNavReference* piChildRef = NULL;
		spChildOcc->GetRelatedReference(piChildRef);

		CATUnicodeString Name = "";
		CATCkeObjectAttrReadServices::GetValueAsString(piChildRef, "PLM_ExternalID", Name);
		CATUnicodeString Revision = "";
		CATCkeObjectAttrReadServices::GetValueAsString(piChildRef, "revision", Revision);

		if (Revision == foInfo.PartRevision && Name == foInfo.PartNumber)
		{
			return true;
		}
	}
	return false;
}

void CAAMBOMInitCmd::ReBuildRelationShip(CATIPLMNavOccurrence_var& spCurrentOcc, 
											CATIPLMNavOccurrence_var& spNewOcc,
											CATIPLMNavReference_var& spRootProcessRef)
{
	DELIPPRSystemAuth_var hPPRSystemAuth;
	::GetPPRSystemAuth(hPPRSystemAuth);
	DELIPPRSystemNav_var hPPRSystemNav;
	::GetPPRSystemNav(hPPRSystemNav);
	//MBOM
	CATListPtrCATIPLMNavOccurrence ListProcessOcc;
	hPPRSystemNav->GetListOfAssignedProcesses(spCurrentOcc, spRootProcessRef, ListProcessOcc);
	if (ListProcessOcc.Size() != 0)
	{
		for (int i = 1; i <= ListProcessOcc.Size(); ++i)
		{
			hPPRSystemAuth->AssignProcess(spNewOcc, ListProcessOcc[i]);
		}
	}
	//Rsource
	DELIPPRResourceAuth_var hPPRResourceAuth;
	::GetPPRResourceAuth(hPPRResourceAuth);
	DELIPPRResourceNav_var hPPRResourceNav;
	::GetPPRResourceNav(hPPRResourceNav);
	CATListPtrCATBaseUnknown listWhoResourceOcc;
	hPPRResourceNav->GetListWhoResource(spCurrentOcc, listWhoResourceOcc);
	if (listWhoResourceOcc.Size() != 0)
	{
		for (int i = 1; i <= listWhoResourceOcc.Size(); ++i)
		{
			CATIPLMNavOccurrence* piResourceOcc = NULL;
			listWhoResourceOcc[i]->QueryInterface(IID_CATIPLMNavOccurrence,(void**)&piResourceOcc);
			hPPRResourceAuth->AssignOperation(piResourceOcc, spNewOcc);
		}
	}
	CATIPLMNavOccurrence* piWhereResourceOcc = NULL;
	hPPRResourceNav->GetWhereResource(spCurrentOcc,(void**)&piWhereResourceOcc);
	if (piWhereResourceOcc != NULL)
	{
		hPPRResourceAuth->AssignOperation(piWhereResourceOcc, spNewOcc);
	}
	CATListPtrCATIPLMNavOccurrence ListWithResourceOcc;
	hPPRResourceNav->GetWithResources(spCurrentOcc, ListWithResourceOcc);
	if (ListWithResourceOcc.Size() != 0)
	{
		for (int i = 1; i <= ListWithResourceOcc.Size(); ++i)
		{
			hPPRResourceAuth->AssignOperation(ListWithResourceOcc[i], spNewOcc);
		}
	}
}